= SQL ユーザーのための Sequel

Sequel の主な恩恵の一つは、それを使用するためにユーザーが SQL を知っていることを要求しないことです。もちろん SQL の知識は役に立ちますが。他のほとんどの Sequel のドキュメントとは異なり、このガイドは読者が SQL を知っていると仮定し、SQL で何かを行う方法の知識があって、Sequel でそれを行う方法を見つける簡単な方法を提供します。

== SQL を直接使用することができる

Sequel では、クエリに SQL を直接使用するはとても簡単です。
Sequel の DSL を学ぶことが時間の浪費になると思われる場合は、もちろんすべてのクエリを SQL で記述することは自由です。
Sequel は実行するクエリの種類に依存して少し異なるメソッドを使用します。

=== SELECT

SELECT クエリは、ほとんどの場合 <tt>Database#fetch</tt> を文字列とブロックで使用すべきです:

  DB.fetch("SELECT * FROM albums") do |row|
    puts row[:name]
  end

<tt>Database#fetch</tt> はクエリを引数とし、データベース上でそれを実行し、返った各レコードをカラムシンボルキーのハッシュとして yield します。
プレースホルダ変数を使用したい場合は、プレースホルダを ? で設定し、fetch のための引数を追加できます:

  DB.fetch("SELECT * FROM albums WHERE name LIKE ?", 'A%') do |row|
    puts row[:name]
  end

プレースホルダをコロンで始めることで名前付きプレースホルダも使用できます。引数はハッシュで指定します:

  DB.fetch("SELECT * FROM albums WHERE name LIKE :pattern", :pattern=>'A%') do |row|
    puts row[:name]
  end

これは ? と引数の対応が難しいような長いクエリの助けになります。

Sequel が実際に内部で行なっていることは、2つにわけられます。まずクエリを表すデータセットを作成し、それからオブジェクトを取り出すためにデータセットの SQL コードを実行します。
ある時点でデータセットを定義しても、あとになるまで実行したくないこともあるでしょう。
ブロックなしで変数にデータセットを格納することで、これを行うことができます:

  ds = DB.fetch("SELECT * FROM albums")

それから、あとで行を取り出したい時に、行を取り出すためにデータセットで +each+ を呼び出すことができます:

  ds.each{|r| puts r[:name]}

文字列が与えられると <tt>Database#[]</tt> は <tt>Database#fetch</tt> を呼ぶことに注意すべきです。つまり次のことも可能です:

  ds = DB["SELECT * FROM albums"]
  ds.each{|r| puts r[:name]}

しかし、<tt>Database#[]</tt> はブロックを直接取ることができず、返されたデータセットで +each+ を呼ぶ必要があります。+each+ のほかにも多くの他のメソッドがあります。ひとつは +all+ で、これはすべてのレコードを配列で返します:

  DB["SELECT * FROM albums"].all # [{:id=>1, :name=>'RF', ...}, ...]

=== INSERT, UPDATE, DELETE

INSERT, UPDATE, DELETE は同じ方法で動作します。
まず <tt>Database#[]</tt> を使用して実行したい SQL でデータセットを生成します:

  insert_ds = DB["INSERT INTO albums (name) VALUES (?)", 'RF']
  update_ds = DB["UPDATE albums SET name = ? WHERE name = ?", 'MO', 'RF']
  delete_ds = DB["DELETE FROM albums WHERE name = ?", 'MO']

それから、返されたデータセットに対して +insert+, +update+, +delete+ メソッドを呼び出します:

  insert_ds.insert
  update_ds.update
  delete_ds.delete

+update+ と +delete+ は影響された行の数を返します。
+insert+ は挿入された行に自動生成されたプライマリキー整数を返します(もしあれば)。

=== 他のクエリ

TRUNCATE, CREATE TABLE, ALTER TABLE のような他のすべてのクエリは、<tt>Database#run</tt> を使用して実行します:

  DB.run "CREATE TABLE albums (id integer primary key, name varchar(255))"

<tt>Database#<<</tt> も使用できます:

  DB << "ALTER TABLE albums ADD COLUMN copies_sold INTEGER"

=== 他の場所

Sequel ではほとんどどこでもリテラル文字列で提供されるリテラル SQL に落とせます。これは <tt>Sequel.lit</tt> で生成できます:

  DB[:albums].select('name') # SELECT 'name' FROM albums
  DB[:albums].select(Sequel.lit('name')) # SELECT name FROM albums

リテラル文字列を生成するさらに簡単な方法として、{core_extensions extension}[rdoc-ref:doc/core_extensions.rdoc] を使用することもできます。これは <tt>String#lit</tt> メソッドを追加し、Ruby 言語に Sequel の DSL を統合する他のメソッドを追加します:

  DB[:albums].select('name'.lit)

そのため、DSL で行いたいことができない場合や、リテラル SQL を簡単に見つたい場合、どこでも Sequel の DSL を使用でき、リテラル SQL に落とすことができます。

== SQL 表現を Sequel に変換する

このガイドの残りは、クエリ表現に Sequel の DSL を使用したくて、SQL でクエリを書く方法は知っているが、Sequel の DSL でそれを書く方法が定かでない人向けです。

この節では、特定の SQL 表現が Sequel でどのように操作されるかを説明します。
次の節では、データセットのメソッド連結を使用して、クエリをどのように生成するかを議論します。

=== <tt>Database#literal</tt>

<tt>Database#literal</tt> メソッドに精通していることが重要です。これは与えられた表現で使用される SQL を返します:

  DB.literal(1)
  # => "1"
  DB.literal(:column)
  # => "\"column\""
  DB.literal('string')
  # => "'string'"

様々なオブジェクトがどのように SQL にリテラル化されるかを見るために試してみてください。

=== データベースロガー

いくつかの Sequel メソッドは <tt>Database#literal</tt> とは少し異なるリテラル化をします。
Sequel がデータベースに送るすべての SQL クエリを見たい場合は、データベースロガーを追加すべきです:

  DB.loggers << Logger.new($stdout)

今、どんな SQL が使用されるかを見る方法を知りました。どのように SQL 構文が Sequel 構文にマップされるか見てみましょう:

=== 識別子

Sequel では SQL 識別子は通常は Ruby シンボルで記述されます:

  :column # "column"

見た通り、デフォルトで Sequel は識別子をクォートします。
データベースに依存して、デフォルトで大文字になることもあります:

  :column # データベースによっては "COLUMN"

単純なシンボルは通常は修飾されない識別子として扱われます。
しかしクエリ内に複数テーブルを使用していて、他のテーブル内のカラムに同じ名前があるようなテーブルの一つのカラムを参照したい場合、参照を修飾する必要があります。
Sequel では主に2つの方法があります。
一つ目は、シンボル中に二重のアンダースコアを使用した暗黙の修飾です:

  :table__column # "table"."column"

注意: 分割するのにピリオドを使用できません:

  :table.column # シンボルの column メソッドを呼び出します

注意: 識別子をクォートして、シンボル中にピリオドを記述しても働きません:

  :"table.column" # "table.column"

識別子を修飾するもう一つの方法は、テーブルとカラムシンボルに <tt>Sequel.qualify</tt> を使用することです:

  Sequel.qualify(:table, :column) # "table"."column"

識別子を生成する他の方法は、Sequel の {virtual row support}[rdoc-ref:doc/virtual_rows.rdoc] を使用することです:

  DB[:albums].select{name} # SELECT "name" FROM "albums"
  DB[:albums].select{albums__name} # SELECT "albums"."name" FROM "albums"

=== 数値

通常、Ruby 数値は直接 SQL 数値にマップされます:

  # Integers
  1 # 1
  -1 # -1

  # Floats
  1.5 # 1.5

  # BigDecimals
  BigDecimal.new('1000000.123091029') # 1000000.123091029

=== 文字列

通常、Ruby 文字列は直接 SQL 文字列にマップされます:

  'name' # 'name'
  "name" # 'name'

=== エイリアス

Sequel は、三重のアンダースコアを使用してカラムシンボルで暗黙的なエイリアスが可能です:

  :column___alias # "column" AS "alias"

暗黙的な修飾と組み合わせることができます:

  :table__column___alias # "table"."column" AS "alias"

エイリアスを生成するのに <tt>Sequel.as</tt> メソッドや、ほとんどの Sequel 固有のオブジェクト式で +as+ メソッドを使用することもできます:

  Sequel.as(:column, :alias) # "column" AS "alias"
  Sequel.qualify(:table, :column).as(:alias) # "table"."column" AS "alias"

=== 関数

SQL 関数を使用するもっとも簡単な方法は仮想行経由です:

  DB[:albums].select{func{}} # SELECT func() FROM "albums"
  DB[:albums].select{func(col1, col2)} # SELECT func("col1", "col2") FROM "albums"

関数名のシンボルで <tt>Sequel.function</tt> メソッドを使用することもできます:

  Sequel.function(:func) # func()
  Sequel.function(:func, :col1, :col2) # func("col1", "col2")

=== 集約関数

集約関数は通常の関数と同じ構文を共有するので同じ方法で動作します:

  Sequel.function(:sum, :column) # sum(column)

しかし、集約関数に DISTINCT 修飾子を使用したい場合は、リテラル SQL または仮想行ブロックを使用する必要があります:

  Sequel.function(:sum, Sequel.lit('DISTINCT column')) # sum(DISTINCT column)
  DB[:albums].select{sum(:distinct, :column){}} # SELECT sum(DISTINCT column) FROM albums

集約関数の引数でワイルドカードを使用したい場合はリテラル SQL または仮想行ブロックを使用する必要があります:

  Sequel.function(:count, Sequel.lit('*')) # count(*)
  DB[:albums].select{count(:*){}} # SELECT count(*) FROM albums

注意: Sequel は +count+, +sum+, +min+, +max+, +avg+, +group_and_count+ のようなヘルパーメソッドを提供します。これは集約関数の一般的な使用方法です。

=== ウィンドウ関数

データベースがウィンドウ関数をサポートしている場合、Sequel は仮想行ブロックを使用してそれを操作できます:

  DB[:albums].select{function(:over){}}
  # SELECT function() OVER () FROM albums

  DB[:albums].select{count(:over, :*=>true){}}
  # SELECT count(*) OVER () FROM albums

  DB[:albums].select{function(:over, :args=>col1, :partition=>col2, :order=>col3){}}
  # SELECT function(col1) OVER (PARTITION BY col2 ORDER BY col3) FROM albums

  DB[:albums].select{function(:over, :args=>[c1, c2], :partition=>[c3, c4], :order=>[c5, c6]){}}
  # SELECT function(c1, c2) OVER (PARTITION BY c3, c4 ORDER BY c5, c6) FROM albums

=== 等値演算子 (=)

Sequel は等値を記述するためにハッシュを使用します:

  {:column=>1} # ("column" = 1)

2要素の配列の配列を記述することもできます:

  [[:column, 1]] # ("column" = 1)

=== 不等値演算子 (!=)

<tt>Sequel.negate</tt> または <tt>Sequel.~</tt> でハッシュまたは2要素配列の配列を反転することで、不等値条件を記述することができます:

  Sequel.negate(:column => 1)   # ("column" != 1)
  Sequel.negate([[:column, 1]]) # ("column" != 1)
  Sequel.~(:column => 1)        # ("column" != 1)
  Sequel.~([[:column, 1]])      # ("column" != 1)

この2つの違いは、negate はハッシュと2要素配列の配列でだけ働き、すべての要素を反転することです。~ は general inversoin です。これは複数要素での例を見るとよくわかります:

  Sequel.negate(:column => 1, :foo => 2)   # (("column" != 1) AND (foo != 2))
  Sequel.~(:column => 1, :foo => 2)        # (("column" != 1) OR (foo != 2))

フィルタ内で不等値条件の必要がある場合は、ほとんど +exclude+ メソッドを使用することができます:

  DB[:albums].exclude(:column=>1) # SELECT * FROM "albums" WHERE ("column" != 1)

注意: +exclude+ は <tt>Sequel.~</tt> と同様 generalized inversoin を行います。

=== 包含と除外演算子 (IN, NOT IN)

Sequel は包含を記述するのにもハッシュを使用します。除外を記述するにはハッシュを反転します:

  {:column=>[1, 2, 3]} # ("column" IN (1, 2, 3))
  Sequel.~(:column=>[1, 2, 3]) # ("column" NOT IN (1, 2, 3))

あなたが推測したように、Sequel はハッシュの値が配列の時に = から IN にスイッチします。
データセットもこれを行うので、サブ Select で包含と除外を簡単にテストできます:

  {:column=>DB[:albums].select(:id)} # ("column" IN (SELECT "id" FROM "albums"))
  Sequel.~(:column=>DB[:albums].select(:id)) # ("column" NOT IN (SELECT "id" FROM "albums"))

Sequel は <tt>Dataset#exists</tt> で SQL EXISTS 演算子もサポートします:

  DB[:albums].exists # EXISTS (SELECT * FROM albums)

=== 同一性演算子 (IS, IS NOT)

Sequel のハッシュは値が true, false, nil の場合に IS を使用します:

  {:column=>nil) # ("column" IS NULL)
  {:column=>true) # ("column" IS TRUE)
  {:column=>false) # ("column" IS FALSE)

否定は、同値と包含で行うのと同じ方法で働きます:

  Sequel.~(:column=>nil) # ("column" IS NOT NULL)
  Sequel.~(:column=>true) # ("column" IS NOT TRUE)
  Sequel.~(:column=>false) # ("column" IS NOT FALSE)

=== 否定演算子 (NOT)

Sequel の一般的な否定演算子は ~ です。これはシンボルと多くの Sequel 固有表現オブジェクトで働きます:

  Sequel.~(:column) # NOT "column"

注意: ~ は実際にはオブジェクトに反転演算子を適用します。このため、

  Sequel.~(:column=>1)

は <tt>NOT (column = 1)</tt> ではなく <tt>(column != 1)</tt> を提供します。

=== 不等号演算子 (< > <= >=)

Sequel は多くの Sequel 固有表現オブジェクトに不等号演算子を直接定義します:

  Sequel.qualify(:table, :column) > 1 # ("table"."column" > 1)
  Sequel.qualify(:table, :column) < 1 # ("table"."column" < 1)
  Sequel.function(:func) >= 1 # (func() >= 1)
  Sequel.function(:func, :column) <= 1 # (func("column") <= 1)

シンボルでこれらを使用したい場合は、シンボルを引数として <tt>Sequel.expr</tt> を呼び出すべきです:

  Sequel.expr(:column) > 1 # ("column" > 1)

仮想行の通常の使用は不等号演算子を操作することです:

  DB[:albums].where{col1 > col2} # SELECT * FROM "albums" WHERE ("col1" > "col2")

=== 標準数学演算子 (+ - * /)

標準数学演算子は、おおくの Sequel 固有表現オブジェクトで定義されています:

  Sequel.expr(:column) + 1 # "column" + 1
  Sequel.expr(:table__column) - 1 # "table"."column" - 1
  Sequel.qualify(:table, :column) * 1 # "table"."column" * 1
  Sequel.expr(:column) / 1 # "column" / 1

Sequel モジュールで直接演算子メソッドを呼ぶこともできます:

  Sequel.+(:column, 1) # "column" + 1
  Sequel.-(:table__column, 1) # "table"."column" - 1
  Sequel.*(Sequel.qualify(:table, :column), 1) # "table"."column" * 1
  Sequel./(:column, 1) # "column" / 1

注意: 次は動作しません:

  1 + Sequel.expr(:column) # raises TypeError

+ や * のような可換演算子では、順番を変更しても問題にはなりませんが、- や / のような非可換演算子は直接表現できません。解決策は Sequel モジュールのメソッドを使用することです:

  Sequel.expr(1) / :column # (1 / "column")
  Sequel./(1, :column) # (1 / "column")

=== 論理演算子 (AND OR)

Sequel は、ほとんどの Sequel 固有表現オブジェクトで、AND と OR の処理を行うために & と | メソッドを定義しています:

  Sequel.expr(:column1) & :column2 # ("column1" AND "column2")
  Sequel.expr(:column1=>1) | {:column2=>2} # (("column1" = 1) OR ("column2" = 2))
  (Sequel.function(:func) > 1) & :column3 # ((func() > 1) AND "column3")

注意: 最後のステートメントでは括弧を使用しています。これを省略すると、期待したものが得られません。
& は > よりも優先度が高いからです:

  Sequel.function(:func) > 1 & :column3

これは次のようにパースされます:

  Sequel.function(:func) > (1 & :column3)

<tt>Sequel.&</tt> と <tt>Sequel.|</tt> メソッドも使用できます:

  Sequel.&(:column1, :column2) # ("column1" AND "column2")
  Sequel.|({:column1=>1}, {:column2=>2}) # (("column1" = 1) OR ("column2" = 2))

ハッシュと2要素配列の配列を、等値条件で AND と OR を指定するために使用できます:

  {:column1=>1, :column2=>2} # (("column1" = 1) AND ("column2" = 2))
  [[:column1, 1], [:column2, 2]] # (("column1" = 1) AND ("column2" = 2))

見た通り、これはデフォルトでは AND でリテラル化されます。代わりに OR を使用するために <tt>Sequel.or</tt> メソッドを使うことができます:

  Sequel.or(:column1=>1, :column2=>2) # (("column1" = 1) OR ("column2" = 2))

既に <tt>Sequel.negate</tt> メソッドで見たように、複数の要素が使用されると AND を使用します:

  Sequel.negate(:column1=>1, :column2=>2) # (("column1" != 1) AND ("column2" != 2))
 
OR を使用して反転するには、<tt>Sequel.~</tt> 演算子を使用できます:

  Sequel.~(:column1=>1, :column2=>2) # (("column1" != 1) OR ("column2" != 2))

注意: <tt>Dataset#exclude</tt> は ~ を使用します。+negate+ ではありません:

  DB[:albums].exclude(:column1=>1, :column2=>2) # SELECT * FROM "albums" WHERE (("column" != 1) OR ("column2" != 2))

=== キャスト

Sequel ではキャストは +cast+ メソッドで行われます。これはほとんどの Sequel 固有表現オブジェクトで有効です:

  Sequel.expr(:name).cast(:text) # CAST("name" AS text)
  Sequel.expr('1').cast(:integer) # CAST('1' AS integer)
  Sequel.qualify(:table, :column).cast(:date) # CAST("table"."column" AS date)

<tt>Sequel.cast</tt> メソッドを使用することもできます:

  Sequel.cast(:name, :text) # CAST("name" AS text)

=== ビット演算子 (& | ^ << >> ~)

Sequel は Sequel::SQL::NumericExpression オブジェクトに対してビット演算子を使用できます:

  Sequel.expr(:number) + 1 # => #<Sequel::SQL::NumericExpression ...>
  (Sequel.expr(:number) + 1) & 5 # (("number" + 1) & 5)

このように、シンボルに + 演算子を使用した時は NumericExpression が得られます。+sql+number+ を使用して表現を NumericExpression に変換できます:

  Sequel.expr(:number).sql_number | 5 # ("number" | 5)
  Sequel.function(:func).sql_number << 7 # (func() << 7)
  Sequel.cast(:name, :integer).sql_number >> 8 # (CAST("name" AS integer) >> 8)

Sequel は +cast_numeric+ でキャストと変換を同時に行うことができます:

  Sequel.expr(:name).cast_numeric ^ 9 # (CAST("name" AS integer) ^ 9)

注意: &, |, ~ はほとんどの表現で既に AND, OR, NOT に定義されています。そのためビット演算を使用したい場合は、最初に変換する必要があります:

  ~Sequel.expr(:name) # NOT "name"
  ~Sequel.expr(:name).sql_number # ~"name"

=== 文字列演算子 (||, LIKE, Regexp)

Sequel は Sequel::SQL::StringExpression オブジェクトで文字列結合演算子を使用できます。これは表現に +sql_string+ メソッドを使用して作成できます:

  Sequel.expr(:name).sql_string + ' - Name' # ("name" || ' - Name')

ビット演算子と同様に Sequel は +cast_string+ でキャストと変換を同時に行うことができます:

  Sequel.expr(:number).cast_string + ' - Number' # (CAST(number AS varchar(255)) || ' - Number')

注意: 数学演算子と同様、表現の順番を変えて動作はできません:

  'Name - ' + Sequel.expr(:name).sql_string # raises TypeError

数学演算子と同様、<tt>Sequel.expr</tt> を使ってオブジェクトをラップできます:

  Sequel.expr('Name - ') + :name # ('Name - ' || "name")
  
<tt>Sequel.join</tt> メソッドは配列の全要素を結合します:

  Sequel.join(['Name', :name]) # ('Name' || "name")

Ruby の <tt>String#join</tt> と同じく、各要素を結合に使用する文字列を引数で指定することができます:

  Sequel.join(['Name', :name], ' - ') # ('Name' || ' - ' || "name")

LIKE 演算子用に、Sequel は +like+ と +ilike+ メソッドを Sequel 固有表現オブジェクトに定義しています:

  Sequel.expr(:name).like('A%') # ("name" LIKE 'A%') 
  Sequel.expr(:name).ilike('A%') # ("name" ILIKE 'A%') 

<tt>Sequel.like</tt> と <tt>Sequel.ilike</tt> メソッドも使用することができます:

  Sequel.like(:name, 'A%') # ("name" LIKE 'A%') 
  Sequel.ilike(:name, 'A%') # ("name" ILIKE 'A%') 

注意: 上記の ilike の構文は Sequel のデフォルトでは PostgreSQL 固有です。
しかし他の多くのアダプタで振る舞いをオーバーライドします。
たとえば、MySQL では Sequel は +like+ で LIKE BINARY を、+ilike+ で LIKE を使用します。
データベースが大文字小文字を区別する LIKE と区別しない LIKE の両方をサポートする場合、+like+ は区別する LIKE で、+ilike+ は区別しない LIKE を使用します。

LIKE 演算子を反転するのは他の反転と同じ方法です:

  ~Sequel.like(:name, 'A%') # ("name" NOT LIKE 'A%')

Sequel は MySQL と PostgreSQL で SQL 正規表現もサポートします。
Ruby の正規表現を +like+ または +ilike+ に渡すか、ハッシュ値に正規表現を指定することで、使用することができます:

  Sequel.like(:name, /^A/) # ("name" ~ '^A')
  ~Sequel.ilike(:name, /^A/) # ("name" !~* '^A')
  {:name=>/^A/i} # ("name" ~* '^A')
  Sequel.~(:name=>/^A/) # ("name" !~ '^A')

注意: 正規表現で +ilike+ を使用すると、常に大文字小文字を区別しません。
+like+ や正規表現の値を持つハッシュを使用する場合、Regexp 自身が大文字小文字を区別する場合だけ、区別されます。

=== 順序指定 (ASC, DESC)

Sequel はほとんどの Sequel 固有表現オブジェクトで +asc+ と +desc+ メソッドを使用することで、昇順、降順を指定することをサポートしています:

  Sequel.expr(:column).asc # "column" ASC
  Sequel.expr(:column).qualify(:table).desc # "table"."column" DESC

<tt>Sequel.asc</tt> と <tt>Sequel.desc</tt> メソッドを使用することもできます:

  Sequel.asc(:column) # "column" ASC
  Sequel.desc(Sequel.expr(:column).qualify(:table)) # "table"."column" DESC

データベースによっては、null 順序を指定することもできます:

  Sequel.asc(:column, :nulls=>:first) # "column" ASC NULLS FIRST
  Sequel.desc(Sequel.expr(:column).qualify(:table), :nulls=>:last) # "table"."column" DESC NULLS LAST

=== 全カラム (.*)

テーブル内の全カラムを選択するために、Sequel は引数なしの識別子で * メソッドをサポートします:

  Sequel.expr(:table).* # "table".*

=== CASE 文

Sequel は <tt>Sequel.case</tt> メソッドを使用することで SQL CASE 文を簡単に与えることができます。
最初の引数は条件を表すハッシュまたは二要素配列の配列で、二番目の引数はデフォルト値(ELSE)です。
ハッシュのキー(または各配列の最初の要素)は WHEN 条件で、ハッシュの値(または各配列の二番目の要素)は THEN 結果です。
例をいくつか示します:

  Sequel.case({:column=>1, 0) # (CASE WHEN "column" THEN 1 ELSE 0 END)
  Sequel.case([[column, 1]], 0) # (CASE WHEN "column" THEN 1 ELSE 0 END)
  Sequel.case({{:column=>nil}=>1}, 0) # (CASE WHEN (column IS NULL) THEN 1 ELSE 0 END)

ハッシュまたは配列が複数引数を持つ場合、複数 WHEN 節が使用されます:

  Sequel.case({:c=>1, :d=>2}, 0) # (CASE WHEN "c" THEN 1 WHEN "d" THEN 2 ELSE 0 END)
  Sequel.case([[:c, 1], [:d, 2]], 0) # (CASE WHEN "c" THEN 1 WHEN "d" THEN 2 ELSE 0 END)

3番目の引数を <tt>Sequel.case</tt> に与えると、CASE と WHEN の間で使用されます:

  Sequel.case({2=>1, 3=>5}, 0, :column) # (CASE column WHEN 2 THEN 1 WHEN 3 THEN 5 ELSE 0 END)

=== 添字/配列アクセス ([])

Sequel は Sequel 固有表現オブジェクトで +sql_subscript+ メソッドを使用することで SQL 添字をサポートします:

  Sequel.expr(:column).sql_subscript(3) # column[3]
  Sequel.expr(:column).qualify(:table).sql_subscript(3) # table.column[3]

<tt>Sequel.subscript</tt> メソッドを使用することもできます:

  Sequel.subscript(:column, 3) # column[3]

SQL と同様に、添字に任意の式を使用することができます:

  Sequel.subscript(:column, Sequel.function(:func)) # column[func()]

== Sequel でのクエリの構築

Sequel ではメソッド連結で SQL クエリを構築できます。

=== データセットの生成

通常は、テーブル名を指定したシンボルで <tt>Dataset#[]</tt> を呼ぶことで、データセットを生成して、開始します:

  DB[:albums] # SELECT * FROM albums

複数の FROM テーブルから SELECT したい場合は複数の引数を使用します:

  DB[:albums, :artists] # SELECT * FROM albums, artists

どの FROM テーブルからも SELECT したくない場合は、dataset を呼ぶだけです:

  DB.dataset # SELECT *

=== メソッド連結

一旦データセットオブジェクトを作ると、メソッド連結でクエリを構築できます。通常はクエリの節毎に1メソッド使用します:

  DB[:albums].select(:id, :name).where(Sequel.like(:name, 'A%')).order(:name)
  # SELECT id, name FROM albums WHERE (name LIKE 'A%') ORDER BY name

注意: 同じ節に影響するメソッドを複数使用しないかぎり、メソッド連結の順番は通常は重要ではありません:

  DB[:albums].order(:name).where(Sequel.like(:name, 'A%')).select(:id, :name)
  # SELECT id, name FROM albums WHERE (name LIKE 'A%') ORDER BY name

=== SELECT, INSERT, UPDATE, DELETE で同じデータセットを使用

データセットを見る時に SELECT 節が表示されることにも注意してください。
Sequel データセットは INSERT, UPDATE, DELETE でも使用されます。
例を示します:

  ds = DB[:albums]
  ds.all # SELECT * FROM albums
  ds.insert(:name=>'RF') # INSERT INTO albums (name) VALUES ('RF')
  ds.update(:name=>'RF') # UPDATE albums SET name = 'RF'
  ds.delete # DELETE FROM albums

通常は +insert+, +update+, +delete+ メソッドはデータセットで定義した適切な節を使用します:

  ds = DB[:albums].where(:id=>1)
  ds.all # SELECT * FROM albums WHERE (id = 1)
  ds.insert(:name=>'RF') # INSERT INTO albums (name) VALUES ('RF')
  ds.update(:name=>'RF') # UPDATE albums SET name = 'RF' WHERE (id = 1)
  ds.delete # DELETE FROM albums WHERE (id = 1)

注意: +update+ と +delete+ は +where+ 引数を使用しますが、+insert+ は使用しません。INSERT は WHERE 節を使用しないためです。

=== 各 SQL 節で使用されるメソッド

各 SQL 節に影響するメソッドにどんなものがあるかを見るには、{"Dataset Basics" guide}[rdoc-ref:doc/dataset_basics.rdoc] を見てください。
