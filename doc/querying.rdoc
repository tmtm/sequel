= Sequel でのクエリ

このガイドは http://guides.rubyonrails.org/active_record_querying.html をベースにしています。

== このガイドの目的

Sequel は簡単に使用でき、とても柔軟で強力なデータベースライブラリで、広く様々な種類のクエリメソッドをサポートしています。
このガイドは Sequel のクエリサポートのやさしい紹介を目的としています。

Sequel で生の SQL を簡単に使用することができますが、Sequel の利用から得られる利点の大部分は、SQL を抽象化し、より良いインタフェースを与える Sequel の能力です。
Sequel は {core_extensions extension}[link:files/doc/core_extensions_rdoc.html] も提供し、Sequel の DSL を Ruby 言語により良く等号します。

== オブジェクトの取り出し

Sequel はデータベースからオブジェクトを取り出すためにいくつかのメソッドを提供します。
メソッドの基礎は、Sequel::Dataset#each です。
これは Sequel::Database が提供する各行を yield します。
しかし Dataset#each は直接使用することもできます。
多くの場合、使用出来るもっと便利な取り出しメソッドが存在します。

=== Sequel::Dataset

Sequel に慣れていなくて詳しくない場合は、おそらく {"Dataset Basics" guide}[link:files/doc/dataset_basics_rdoc.html] を読むべきです。それからここに戻ってきてください。

=== ひとつのオブジェクトの取り出し

Sequel はひとつのオブジェクトを取り出すのに、かなりの方法を提供します。

==== プライマリキーの使用 [Sequel::Model]

<tt>Sequel::Model.[]</tt> は、そのプライマリキー値でモデルインスタンスを見つけるために使用する簡単なメソッドです:

  # プライマリキー(id) 1 の artist を見つける
  artist = Artist[1]
  # SELECT * FROM artists WHERE id = 1
  => #<Artist @values={:name=>"YJM", :id=>1}>

与えられたプライマリキーのレコードがない場合、nil が返ります。レコードが見つからなかった場合に例外を上げたい場合は、<tt>Sequel::Model.with_pk!</tt> を使用することができます:

  artist = Artist.with_pk!(1)

==== +first+ の使用

データセットの最初のレコードだけが欲しい場合、<tt>Sequel::Dataset#first</tt> がもっともわかりやすいメソッドです:

  artist = Artist.first
  # SELECT * FROM artists LIMIT 1
  => #<Artist @values={:name=>"YJM", :id=>1}>

+first+ にオプションを渡すとフィルタとして使用されます:

  artist = Artist.first(:name => 'YJM')
  # SELECT * FROM artists WHERE (name = 'YJM') LIMIT 1
  => #<Artist @values={:name=>"YJM", :id=>1}>
  
  artist = Artist.first(Sequel.like(:name, 'Y%'))
  # SELECT * FROM artists WHERE (name LIKE 'Y%') LIMIT 1
  => #<Artist @values={:name=>"YJM", :id=>1}>
  
If there is no matching row, +first+ will return nil.  If you want to
raise an exception instead, use <tt>first!</tt>.

<tt>Sequel::Dataset#[]</tt> は基本的に +first+ の別名です。違いは引数を取ることです:

  DB[:artists][:name => 'YJM']
  # SELECT * FROM artists WHERE (name = 'YJM') LIMIT 1
  => {:name=>"YJM", :id=>1}

注意: Model.[] にはプライマリキーを直接渡すことができますが、Dataset#[] はできません(モデルデータセットでない場合)。

==== +last+ の使用

データセットの最後のレコードが欲しい場合は、<tt>Sequel::Dataset#last</tt> がわかりやすいメソッドです。
データセットがモデルデータセットでない場合は、last はデータセットが順序化されていることを要求することに注意してください。
モデルデータセットでは +last+ はプライマリキーフィールドの逆順を行います:

  artist = Artist.last
  # SELECT * FROM artists ORDER BY id DESC LIMIT 1
  => #<Artist @values={:name=>"YJM", :id=>1}>

注意: +last+ は、データセットを逆順化し、それから +first+ を呼びます。
これは、プレーンのデータセットに順序がない場合、+last+ が Sequel::Error を raise する理由です。
そうでないと +first+ と同じレコードが提供されて、多くのユーザーが混乱してしまいます。

注意: データセットに明白な順序を与えない限り、+last+ は必ずしもデータセットで最後のレコードを与えようとはしません。

==== ひとつのカラム値の取り出し

行全体を欲しいのではなく、特定のカラムの値だけを欲しいことがあります。
<tt>Sequel::Dataset#get</tt> がそのためのメソッドです:

  artist_name = Artist.get(:name)
  # SELECT name FROM artists LIMIT 1
  => "YJM"

=== 複数のオブジェクトの取り出し

==== ハッシュの配列やモデルオブジェクト

データセットに関連づいた行すべての配列を欲しいことも多くあります。
この場合 <tt>Sequel::Dataset#all</tt> がそれを行うメソッドです:

  artists = Artist.all
  # SELECT * FROM artists
  => [#<Artist @values={:name=>"YJM", :id=>1}>,
      #<Artist @values={:name=>"AS", :id=>2}>]

==== Enumerable インタフェースの使用

<tt>Sequel::Dataset</tt> は Enumerable インタフェースを使用します。
そのためメソッド名 each を提供します。
これは、データベースから取り出したハッシュまたはモデルオブジェクトを yield します:

  Artist.each{|x| p x.name}
  # SELECT * FROM artists
  "YJM"
  "AS"

これは +map+ のような Enumerable モジュールのすべてのメソッドが利用できることを意味します:

  artist_names = Artist.map{|x| x.name}
  # SELECT * FROM artists
  => ["YJM", "AS"]

==== カラム値の配列

Sequel は引数を取る拡張された +map+ メソッドも持ちます。
+map+ に引数を与えると、与えられたカラムの値の配列を返します。
前の例は次のように簡単に操作できます:

  artist_names = Artist.map(:name)
  # SELECT * FROM artists
  => ["YJM", "AS"]

この2つの方法の違いは、返される値の配列が、引数つきの +map+ は実際には次を行うことです:

  artist_names = Artist.map{|x| x[:name]} # x.name ではありません

注意: +map+ に引数を与えるかどうかによらず、それは select されるカラムを変更しません。
ひとつのカラムを select してカラムの値の配列を戻したいだけであれば、+select_map+ を使用できます:

  artist_names = Artist.select_map(:name)
  # SELECT name FROM artists
  => ["YJM", "AS"]

map に順序をつけたいこともよくあるので、Sequel は +select_order_map+ メソッドも提供します:

  artist_names = Artist.select_order_map(:name)
  # SELECT name FROM artists ORDER BY name
  => ["AS", "YJM"]

これらすべてのケースで、カラムシンボルの配列を指定でき、値の配列の配列が返ります:

  artist_names = Artist.select_map([:id, :name])
  # SELECT id, name FROM artists
  => [[1, "YJM"], [2, "AS"]]

==== ハッシュ

Sequel では +to_hash+ メソッドを使用して、簡単に SQL クエリを得て、Ruby ハッシュとしてそれを返すことができます:

  artist_names = Artist.to_hash(:id, :name)
  # SELECT * FROM artists
  => {1=>"YJM", 2=>"AS"}

見た通り、+to_hash+ メソッドは最初のシンボルをキーとして、二番目のシンボルを値として使用します。
そのため、2つの引数を交換すると、ハッシュはそのキーと値が置き換えられます:

  artist_names = Artist.to_hash(:name, :id)
  # SELECT * FROM artists
  => {"YJM"=>1, "AS"=>2}

ここで、同じキーに複数の値があった場合はどうなるでしょう？
デフォルトでは、+to_hash+ は最後に一致した値を持ちます。
一致したすべての値に関心がある場合、+to_hash_groups+ を使用します。
これは受信した順に一致した値の配列の配列の値を作ります:

  artist_names = Artist.to_hash_groups(:name, :id)
  # SELECT * FROM artists
  => {"YJM"=>[1, 10, ...], "AS"=>[2, 20, ...]}

+to_hash+ にひとつの引数だけを与えた場合、ハッシュ全体かモデルオブジェクトを値として使用します:

  artist_names = DB[:artists].to_hash(:name)
  # SELECT * FROM artists
  => {"YJM"=>{:id=>1, :name=>"YJM"}, "AS"=>{:id=>2, :name=>"AS"}}

+to_hash_groups+ も同様に動作します:

  artist_names = DB[:artists].to_hash_groups(:name)
  # SELECT * FROM artists
  => {"YJM"=>[{:id=>1, :name=>"YJM"}, {:id=>10, :name=>"YJM"}], ...}

モデルデータセットの +to_hash+ メソッドは引数なしで呼ぶことができます。
この場合はプライマリキーをキーとして、モデルオブジェクトを値として使用します。
これは identity map を簡単に生成するために使用できます:

  artist_names = Artist.to_hash
  # SELECT * FROM artists
  => {1=>#<Artist @values={:id=>1, :name=>"YGM"}>,
      2=>#<Artist @values={:id=>2, :name=>"AS"}>}

+to_hash_groups+ に等しい操作はありません。プライマリキーはユニークなので、一致するレコードはひとつだけになるからです。

注意: +to_hash+ は select される カラムを変更しません。
しかし select されるカラムを変更し配列を返すために +select_map+ メソッドがあるように、
Sequel は選択されたカラムを変更しハッシュを返すために +select_hash+ メソッドを持ちます:

  artist_names = Artist.select_hash(:name, :id)
  # SELECT name, id FROM artists
  => {"YJM"=>1, "AS"=>2}

同様に +select_hash_groups+ もあります:

  artist_names = Artist.select_hash_groups(:name, :id)
  # SELECT name, id FROM artists
  => {"YJM"=>[1, 10, ...], "AS"=>[2, 20, ...]}

== データセットの変更

注意: 取り出すメソッドは上述のように、存在するデータセットに含まれる行を返すだけです。
多くの場合、テーブルの全行に興味はなく、なんらかの基準に基づいた行のサブセットに興味があるだけです。
Sequel ではデータセットのフィルタリングは、通常はレコードの取り出しとは別に行われます。

実際には2種類のデータセットメソッドが使用されます:

1. 上述のように行を返すメソッド
2. 後述のように変更されたデータセットを返すメソッド

Sequel はメソッドを連結して、データセットを変更するのに関数形式の API を使用します。
簡単な例から開始しましょう:

これは +artists+ テーブルの全レコードを含む基本的なデータセットです:

  ds1 = DB[:artists]
  # SELECT * FROM artists

"A" で始まる名前の artists だけに興味があるとしましょう:

  ds2 = ds1.where(Sequel.like(:name, 'A%'))
  # SELECT * FROM artists WHERE name LIKE 'A%'

ここで +where+ は +WHERE+ 節をクエリに追加するデータセットを返します。
重要なことは、+where+ はレシーバーを変更しないことです:

  ds1
  # SELECT * FROM artists
  ds2
  # SELECT * FROM artists WHERE name LIKE 'A%'
 
Sequel では、使用される多くのデータセットメソッドは、データセット自身を変更しません。
そのため、ある場所での使用が他の場所での使用に影響するかどうかを気にすることなしに、複数の場所でデータセットを自由に使用できます。
これが関数形式 API によって意味されることです。

id と name カラムだけを select して、name の順番にしたいとしましょう:

  ds3 = ds.order(:name).select(:id, :name)
  # SELECT id, name FROM artists WHERE name LIKE 'A%' ORDER BY name
  
戻り値を変数に割り当てて、select を呼び出す必要がないことに注意してください。
order はデータセットを返すため、返されるデータセット上で直接 select を呼び出せるためです。
これがメソッド連結 API によって意味されることです。

いろんな節を変更するメソッドを任意の順に呼び出すことができることに注意してください。
このケースでは、WHERE 節が最初に追加され、それから ORDER 節、そして SELECT 節を変更しています。
これは API を柔軟にし、クエリのどの部品をいつでも変更することができます。

== フィルタ

フィルタリングはおそらく Sequel で行われるもっとも一般的なデータセット変更アクションです。
+where+ と +filter+ の両方のメソッドが、データセットの WHERE 節を変更することによって、データセットをフィルタします。
両方とも、後述のように広い種類の入力形式を受け付けます。

=== ハッシュ

フィルタを提供するもっとも一般的な形式がハッシュです。
通常、Sequel はハッシュで指定された条件を一致または包含として扱います。
どの形式の条件が使用されるかはハッシュの値に依存します。

Sequel が値のクラスに特別なサポートを持っていない場合は、単純な一致ステートメントが使用されます:

  Artist.where(:id=>1)
  # SELECT * FROM artists WHERE id = 1

  Artist.where(:name=>'YJM')
  # SELECT * FROM artists WHERE name = 'YJM'

配列には、Sequel は IN 演算子を使用します。

  Artist.where(:id=>[1, 2])
  # SELECT * FROM artists WHERE id IN (1, 2)

データセットには、Sequel は subselect つきの IN 演算子を使用します:

  Artist.where(:id=>Album.select(:artist_id))
  # SELECT * FROM artists WHERE id IN (
  #   SELECT artist_id FROM albums)

nil, true, false のような論理値には、Sequel は IS 演算子を使用します:

  Artist.where(:id=>nil)
  # SELECT * FROM artists WHERE id IS NULL

Range には、Sequel は不等号ステートメントのペアを使用します:

  Artist.where(:id=>1..5)
  # SELECT * FROM artists WHERE id >= 1 AND id <= 5

最後に、Regexp には、Sequel は SQL 正規表現を使用します。
これはおそらく PostgreSQL と MySQL だけしかサポートされないことに注意してください。

  Artist.where(:name=>/JM$/)
  # SELECT * FROM artists WHERE name ~ 'JM$'

複数のハッシュ引数がある場合は、フィルタは AND されます:

  Artist.where(:id=>1, :name=>/JM$/)
  # SELECT * FROM artists WHERE id = 1 AND name ~ 'JM$'

2つの異なる +where+ 呼び出しを使用するのと同じように働きます:

  Artist.where(:id=>1).where(:name=>/JM$/)
  # SELECT * FROM artists WHERE id = 1 AND name ~ 'JM$'

=== 2要素配列の配列

2要素配列の配列を使用する場合、ハッシュとして扱われます。
2要素配列の配列を使用する利点は、キーを重複できることだけです。
次のようにできます:

  Artist.where([[:name, /JM$/], [:name, /^YJ/]])
  # SELECT * FROM artists WHERE name ~ 'JM$' AND name ~ '^YJ'

=== 仮想行ブロック

ブロックがフィルタに渡されると、仮想行ブロックとして扱われます:

  Artist.where{id > 5}
  # SELECT * FROM artists WHERE id > 5

仮想行ブロックについての詳細は {"Virtual Rows" guide}[link:files/doc/virtual_rows_rdoc.html] を参照してください。

正規表現とブロックの両方を与えることもできます。この場合は結果は AND されます:

  Artist.where(:name=>'A'...'M'){id > 5}
  # SELECT * FROM artists WHERE name >= 'A' AND name < 'M' AND id > 5

=== シンボル

データベースに論理カラムを持ち、真の値だけ欲しい場合は、カラムシンボルだけをフィルタに渡すことができます:

  Artist.where(:retired)
  # SELECT * FROM artists WHERE retired

=== SQL::Expression

Sequel は簡単に SQL 式を生成できる DSL を持っています。
これらの SQL 式は Sequel::SQL::Expression のサブクラスのインスタンスです。
既に以前にこの例を見ています:

  Artist.where(Sequel.like(:name, 'Y%'))
  # SELECT * FROM artists WHERE name LIKE 'Y%'

この場合 Sequel.like は Sequel::SQL::BooleanExpression オブジェクトを返します。
これはフィルタで直接使用されます。

任意の複雑な式を生成するために DSL を使用することができます。
SQL::Expression オブジェクトは Sequel モジュールの特異メソッド経由で生成できます。
もっとも一般的なメソッドは Sequel.expr です。
これは任意のオブジェクトを引数として、SQL::Expression オブジェクトにそれをラップいます。
多くの場合、返される SQL::Expression は +AND+ に & 演算子を、+OR+ に | 演算子を、反転に ~ 演算子をサポートします:

  Artist.where(Sequel.like(:name, 'Y%') & (Sequel.expr(:b=>1) | Sequel.~(:c=>3)))
  # SELECT * FROM artists WHERE name LIKE 'Y%' AND (b = 1 OR c != 3)

これらの式演算子を仮想行サポートと組み合わせることができます:

  Artist.where{(a > 1) & ~((b(c) < 1) | d)}
  # SELECT * FROM artists WHERE a > 1 AND b(c) >= 1 AND NOT d

& と | 演算子を使用する時には、括弧を使用することに注意してください。他の演算子よりも優先度が低いためです。
次は動作しません:

  Artist.where{a > 1 & ~(b(c) < 1 | d)}
  # Sequel::SQL::Identifier で Integer#| が呼ばれるため TypeError が raise します。

=== プレースホルダ文字列

あなたが手を汚して、いくつかの SQL を書きたいと仮定して、Sequel は値にプレースホルダを使用する文字列を使用できます:

  Artist.where("name LIKE ?", 'Y%')
  # SELECT * FROM artists WHERE name LIKE 'Y%'

これはもっとも一般的なプレースホルダの形式で、各クエスチョンマークは次の引数の代わりです:

  Artist.where("name LIKE ? AND id = ?", 'Y%', 5)
  # SELECT * FROM artists WHERE name LIKE 'Y%' AND id = 5

ハッシュで名前付きのプレースホルダを使用することもできます。名前付きプレースホルダはプレースホルダ名の前にコロンを使用します:

  Artist.where("name LIKE :name AND id = :id", :name=>'Y%', :id=>5)
  # SELECT * FROM artists WHERE name LIKE 'Y%' AND id = 5

望まない場合は、プレースホルダを与える必要はありません:

  Artist.where("id = 2")
  # SELECT * FROM artists WHERE id = 2

しかし、信頼できない入力を使用する場合は、プレースホルダを絶対に使用すべきです。
通常、文字列中にハードコーディングされた値でなければ、プレースホルダを使用すべきです。
自分が何をしているのか確実でない場合は、補間を使用して構築された文字列を絶対に渡してはいけません。

  Artist.where("id = #{params[:id]}") # やってはいけません！
  Artist.where("id = ?", params[:id]) # 代わりにこうします
  Artist.where(:id=>params[:id].to_i) # もっと良いです

=== 反転

Sequel で不一致条件や NOT IN 演算子をどのように記述するか不思議に思うかもしれません。
Sequel は条件の反転について一般的にサポートしています。
不一致条件を書くには、一致条件を書いてそれを反転します:

  Artist.where(:id=>5).invert
  # SELECT * FROM artists WHERE id != 5

+invert+ はフィルタ全体を反転することに注意してください:

  Artist.where(:id=>5).where{name > 'A'}.invert
  # SELECT * FROM artists WHERE id != 5 OR name <= 'A'

一般に、+invert+ はめったに使用しません。+exclude+ が特定のフィルタだけを反転することができるためです:

  Artist.exclude(:id=>5)
  # SELECT * FROM artists WHERE id != 5
  
  Artist.where(:id=>5).exclude{name > 'A'}
  # SELECT * FROM artists WHERE id = 5 OR name <= 'A'

配列で NOT IN を行います:

  Artist.exclude(:id=>[1, 2])
  # SELECT * FROM artists WHERE id NOT IN (1, 2)

または NOT LIKE 演算子を使用します:

  Artist.exclude(Sequel.like(:name, '%J%'))
  # SELECT * FROM artists WHERE name NOT LIKE '%J%'
 
=== 削除

既存のすべてのフィルタを削除するには +unfiltered+ を使用します:

  Artist.where(:id=>1).unfiltered
  # SELECT * FROM artists

== 順序

Sequel は SQL ORDER BY 節を操作するためのメソッドを多く提供します。
もっとも基本的なものは +order+ です:

  Artist.order(:id)
  # SELECT * FROM artists ORDER BY id

複数の引数を指定することで、ひとつ以上のカラムでソートできます:

  Album.order(:artist_id, :id)
  # SELECT * FROM album ORDER BY artist_id, id

+where+ と異なり、+order+ は既存の順序を置き換えることに注意してください。
既存の順序に追加するのではありません:

  Artist.order(:id).order(:name)
  # SELECT * FROM artists ORDER BY name
  
既存の順序の最後にカラムを追加したい場合:

  Artist.order(:id).order_append(:name)
  # SELECT * FROM artists ORDER BY id, name

既存の順序の先頭にカラムを追加したい場合:

  Artist.order(:id).order_prepend(:name)
  # SELECT * FROM artists ORDER BY name, id

=== 反転

既存のフィルタを反転できるのと同様に、+reverse+ を使用して既存の順序を反転することができます:

  Artist.order(:id).reverse
  # SELECT FROM artists ORDER BY id DESC

あなたの予想通り +reverse+ はあまり多く使用されません。
一般には、カラムの降順を指定するには <tt>Sequel.desc</tt> が普通は使用されます:

  Artist.order(Sequel.desc(:id))
  # SELECT FROM artists ORDER BY id DESC

これは昇順と降順の両方を簡単に使用することができます:

  Artist.order(:name, Sequel.desc(:id))
  # SELECT FROM artists ORDER BY name, id DESC

=== 削除

+unfiltered+ でフィルタを削除できるのと同様に、+unordered+ で順序を削除できます:

  Artist.order(:name).unordered
  # SELECT * FROM artists

== カラムの選択

Sequel はカラム選択を操作するためいくつかのメソッドを提供します。
推測どおり、使用される主なメソッドは +select+ です:

  Artist.select(:id, :name)
  # SELECT id, name FROM artists

メソッドの引数として、選択するすべてのカラムを記述するだけです。

モデルオブジェクトを扱っている場合は、オブジェクトの更新や破棄を行いたい時にプライマリキーを含めたいでしょう。
使用を計画しているアソシエーションに関連した任意のキー(プライマリや外部キー)も含めたいでしょう。

カラムが選択されていなくて、それにアクセスを試みると nil を得ます:

  artist = Artist.select(:name).first
  # SELECT name FROM artists LIMIT 1

  artist[:id]
  # => nil

+order+ のように +select+ は既存の選択されたカラムを置き換えます:

  Artist.select(:id).select(:name)
  # SELECT name FROM artists

既存の選択されたカラムに追加するには、+select_append+ を使用します:

  Artist.select(:id).select_append(:name)
  # SELECT id, name FROM artists

特定の選択されたカラムを削除するには、+select_all+ を使用してすべてのカラムをデフォルトに戻します:

  Artist.select(:id).select_all
  # SELECT * FROM artists

与えられたテーブルからすべてのカラムを選択するには、+select_all+ に引数を与えます:

  Artist.select_all(:artists)
  # SELECT artists.* FROM artists

=== Distinct

レコードを取り出す時に重複行を1行として扱うには、+distinct+ を使用します:

  Artist.distinct.select(:name)
  # SELECT DISTINCT name FROM artists

注意: DISTINCT は別の SQL 節です。select に渡す関数ではありません。

== Limit と Offset

+limit+ を使用して、データセットを指定した行数に制限することができます:

  Artist.limit(5)
  # SELECT * FROM artists LIMIT 5

+limit+ に二番目の引数を与えることで、オフセットを指定できます:

  Artist.limit(5, 10)
  # SELECT * FROM artists LIMIT 5 OFFSET 10

これは、元のデータセットの11番目から15番目のレコードを返します。

データセットから limit を削除するには +unlimited+ を使用します:

  Artist.limit(5, 10).unlimited
  # SELECT * FROM artists

== グルーピング

SQL GROUP BY 節は、指定されたカラムのグループの値をベースに複数の行を結合するために使用されます。

SQL ステートメントの GROUP BY 節を変更するには +group+ を使用します:

  Album.group(:artist_id)
  # SELECT * FROM albums GROUP BY artist_id

+ungrouped+ を使用して既存のグルーピングを削除できます:

  Album.group(:artist_id).ungrouped
  # SELECT * FROM albums
 
グルーピングはグループ化された行の数をカウントすることによく使用されます。
Sequel はこれを簡単に行えるように +group_and_count+ メソッドを提供します:

  Album.group_and_count(:artist_id)
  # SELECT artist_id, count(*) AS count FROM albums GROUP BY artist_id

これは各 artist_id のアルバムの数を返します。

同じカラムを選択してグループしたい場合は +select_group+ を使用することができます:

  Album.select_group(:artist_id)
  # SELECT artist_id FROM albums GROUP BY artist_id

いくつか集約関数を追加するため、通常はこの後に +select_append+ 呼び出しを追加するでしょう:

  Album.select_group(:artist_id).select_append{sum(num_tracks).as(tracks)}
  # SELECT artist_id, sum(num_tracks) AS tracks FROM albums GROUP BY artist_id

== Having

SQL HAVING 節は WHERE 節に似ていますが、グルーピングが適用される前ではなく、適用後に結果をフィルタする違いがあります。
少なくとも10個のアルバムを持っているアーティストだけを返したい場合などに使用できます:

  Album.group_and_count(:artist_id).having{count >= 10}
  # SELECT artist_id, count(*) AS count FROM albums
  # GROUP BY artist_id HAVING count >= 10

WHERE 節と HAVING 節の両方共 +unfiltered+ で削除できます:

  Album.group_and_count(:artist_id).having{count >= 10}.
   where(:name.like('A%')).unfiltered
  # SELECT artist_id, count(*) AS count FROM albums GROUP BY artist_id

== 結合

Sequel はデータセットと他のテーブルやデータセットをとても簡単に結合できます。
使用する基本的なメソッドは +join_table+ です:

  Album.join_table(:inner, :artists, :id=>:artist_id)
  # SELECT * FROM albums
  # INNER JOIN artists ON artists.id = albums.artist_id

多くの場合、+join_table+ を直接呼ぶことはありません。
Sequel はすべての一般的な結合タイプ(そしてほとんどの一般的でないもの)のショートカットを提供します。
たとえば +join+ は内部結合を行います:

  Album.join(:artists, :id=>:artist_id)
  # SELECT * FROM albums
  # INNER JOIN artists ON artists.id = albums.artist_id

+left_join+ は LEFT JOIN を行います:

  Album.left_join(:artists, :id=>:artist_id)
  # SELECT * FROM albums
  # LEFT JOIN artists ON artists.id = albums.artist_id

=== テーブル/データセットの結合

これらの特殊な結合メソッドのすべてについて、最初の引数は通常は結合するテーブルの名前です。
しかしモデルクラスを与えることもできます:

  Album.join(Artist, :id=>:artist_id)

データセットも指定可能です。この場合はサブSELECTが使用されます:

  Album.join(Artist.where{name < 'A'}, :id=>:artist_id)
  # SELECT * FROM albums
  # INNER JOIN (SELECT * FROM artists WHERE (name < 'A')) AS t1
  #  ON (t1.id = albums.artist_id)

=== 結合条件

特殊な結合メソッドの2番目の引数は結合時に使用される条件です。
これはフィルタ式に似ていますが、少しのマイナーな例外があります。

==== 暗黙の修飾

結合条件として使用されたハッシュはフィルタと同様に作用します。
例外は、修飾されてないシンボルのキーが自動的に最初の引数のテーブルで修飾され、
修飾されていないシンボルの値は自動的に最初のテーブルか結合された最後のテーブルで修飾されることです。
この暗黙的な修飾は、Sequel の結合が簡単に記述できる理由のひとつです:

  Album.join(:artists, :id=>:artist_id)
  # SELECT * FROM albums
  # INNER JOIN artists ON artists.id = albums.artist_id

<tt>:id</tt> シンボルが自動的に +artists+ で修飾され、+artist_id+ シンボルが自動的に +albums+ で修飾されることに注目してください。

Sequel は値の暗黙的な修飾に最後に結合されたテーブルを使用するため、次のようなことも可能です:

  Album.join(:artists, :id=>:artist_id).
   join(:members, :artist_id=>:id)
  # SELECT * FROM albums
  # INNER JOIN artists ON artists.id = albums.artist_id
  # INNER JOIN members ON members.artist_id = artists.id

注意: +members+ テーブルを結合する時、+artist_id+ は +members+ で修飾され、+id+ は +artists+ で修飾されます。

良いデフォルトですが、暗黙的な修飾は常に正しいわけではありません:

  Album.join(:artists, :id=>:artist_id).
   join(:tracks, :album_id=>:id)
  # SELECT * FROM albums
  # INNER JOIN artists ON artists.id = albums.artist_id
  # INNER JOIN tracks ON tracks.album_id = artists.id

ここで +id+ は +albums+ ではなく +artists+ で修飾されることに注意してください。
外部キー <tt>tracks.album_id</tt> は <tt>artists.id</tt> ではなく <tt>albums.id</tt> を参照しているので、これは間違いです。
これを修正するには、結合時に明示的に修飾する必要があります:

  Album.join(:artists, :id=>:artist_id).
   join(:tracks, :album_id=>:albums__id)
  # SELECT * FROM albums
  # INNER JOIN artists ON artists.id = albums.artist_id
  # INNER JOIN tracks ON tracks.album_id = albums.id

フィルタと同様、2要素配列の配列はハッシュと同じように扱われますが、キーの重複は許されます:

  Album.join(:artists, [[:id, :artist_id], [:id, 1..5]])
  # SELECT * FROM albums INNER JOIN artists
  #  ON artists.id = albums.artist_id
  #   AND artists.id >= 1 AND artists.id <= 5

ハッシュの場合と同様、配列中の修飾されていないシンボル要素は暗黙的に修飾されます。

デフォルトでは Sequel は条件中の修飾されていないシンボルだけを修飾します。
しかし <tt>:qualify=>:deep</tt> オプションをオプションのハッシュとして指定すると、深い修飾を行うことができます。
これは部分式を修飾できます。
たとえば、大文字小文字を区別しない文字列比較を使用して JOIN を行うことができます:

  Album.join(:artists, {Sequel.function(:lower, :name) =>
                        Sequel.function(:lower, :artist_name)},
             :qualify => :deep)
  # SELECT * FROM albums INNER JOIN artists
  #  ON (lower(artists.name) = lower(albums.artist_name))

どちらの場合でも lower の引数が正しく修飾されることに注意してください。Sequel 4 からは、<tt>:qualify=>:deep</tt> オプションがデフォルトになります。

==== USING 結合

上述したように、もっとも一般的なタイプの結合条件は JOIN ON です。
しかし SQL 標準は JOIN USING で結合条件を指定することができます。
Sequel は簡単にこれを使用できます。

JOIN USING は使用するカラムが両方のテーブルで同じ名前を持つ時に役に立ちます。
たとえば、すべてのテーブルに +id+ という名前のプライマリカラムを持つのではなく、+artists+ テーブルで +artist_id+ を、+albums+ テーブルに +album_id+ を使用すると、次のように行うことができます:

  Album.join(:artists, [:artist_id])
  # SELECT * FROM albums INNER JOIN artists USING (artist_id)

このようにシンボルの配列として USING カラムを指定します。

==== NATURAL 結合

NATURAL 結合は USING 結合よりもさらに1ステップ進んで、両方のテーブルの同じ名前のすべてのカラムが結合に使用されると仮定します:

  Album.natural_join(:artists)
  # SELECT * FROM albums NATURAL JOIN artists

この場合、なにも条件を指定する必要はありません。

==== 結合ブロック

ブロックに条件を受け付ける結合メソッドを提供できます。
ブロックは引数を３つ受け付けます。
結合しようとしているテーブルのテーブルエイリアス、結合された最後のテーブル（または最初のテーブル）のテーブルエイリアス、前の <tt>Sequel::SQL::JoinClause</tt> の配列です。

暗黙的な修飾の動作と同じようにカラムを修飾できます。使用されている特定のエイリアスについて気にする必要はありません。
たとえば、albums と artists テーブルを結合したいが、artist の name が albums の name の前にくるような albums だけを求めたいとします。

  Album.join(:artists, :id=>:artist_id) do |j, lj, js|
    Sequel.qualify(j, :name) < Sequel.qualify(lj, :name)
  end
  # SELECT * FROM albums INNER JOIN artists
  # ON artists.id = albums.artist_id
  # AND artists.name < albums.name

Sequel でハッシュで表せないほど大きいものについては、ブロックを使用してテーブルを手で修飾する必要があります。

== From

通常 FROM テーブルはデータセットを生成する時に最初に置かれる節です
標準的な Sequel::Model では、データセットは既に配置された FROM 節を持っています。
データセットを生成するもっとも一般的な方法は <tt>Database#[]</tt> メソッドで、これは FROM 節を配置します。

しかし、+from+ を使用して、選択している FROM テーブルを変更することができます:

  Album.from(:albums, :old_albums)
  # SELECT * FROM albums, old_albums

FROM 節の複数のテーブルはデフォルトで cross join を使用することに注意してください。
そのため行の数は、albums の数掛ける old_albums の数になります。

複数の FROM テーブルを使用して、WHERE 節に条件を設定することは、テーブル結合の古典的な方法です:

  DB.from(:albums, :artists).where(:artists__id=>:albums__artist_id)
  # SELECT * FROM albums, artists WHERE artists.id = albums.artist_id

=== subselect 内の現在のデータセットの使用

いくつかのケースでは、subselect 内の現在のデータセットをラップしたいことがあるでしょう。
これは +from_self+ を使用する例です:

  Album.order(:artist_id).limit(100).from_self.group(:artist_id)
  # SELECT * FROM (SELECT * FROM albums ORDER BY artist_id LIMIT 100)
  #  AS t1 GROUP BY artist_id

これは +from_self+ を使わない場合と少し異なります:

  Album.order(:artist_id).limit(100).group(:artist_id)
  # SELECT * FROM albums GROUP BY artist_id ORDER BY name LIMIT 100

+from_self+ なしの場合、グループ化を行い、返されるグループ化されたレコードの数を 100 に制限します。
そのため 100 以上の artists の albums を持っている場合、結果は 100 個になります。

+from_self+ ありの場合、グルーピング前にレコード数を制限します。
そのためもっとも低い id の artists が 100 albums を持つ場合、結果は 1 個になります。100 個ではありません。

== 更新のためのロック

Sequel は、返されるレコードが現在のトランザクションがコミットされるまで他のクエリによって変更されないように、クエリに FOR UPDATE 節を簡単に追加できます。
行を返す時に +for_update+ データセットメソッドを使用するだけです:

  DB.transaction do
    album = Album.for_update.first(:id=>1)
    # SELECT * FROM albums WHERE id = 1 FOR UPDATE
    album.num_tracks += 1
    album.save
  end

これは、select してからトランザクションが終了するまでの間に、行が他の接続によって変更されないことを保証します。

=== 楽観的ロック

Sequel で提供されるモデルプラグインの一つは楽観的ロックプラグインです。
これは、ふたつの異なる接続が同じ行を変更する場合に、エラーを検出して raise するための独立した方法をデータベースに提供します。
これは Web フォームのようなものに有用です。Web はステートレスなので、ユーザーがフォームを見ている間トランザクションを保持できません。

== カスタム SQL

Sequel は、<tt>Database#[]</tt> メソッドに文字列を与えることで、カスタム SQL を簡単に使用することができます:

  DB["SELECT * FROM artists"]
  # SELECT * FROM artists

+with_sql+ データセットメソッドを使用して、正確な SQL を使用するデータセットを返すこともできます:

  DB[:albums].with_sql("SELECT * FROM artists")
  # SELECT * FROM artists

これらのメソッドのどちらもプレースホルダを使用することができます:

  DB["SELECT * FROM artists WHERE id = ?", 5]
  # SELECT * FROM artists WHERE id = 5

  DB[:albums].with_sql("SELECT * FROM artists WHERE id = :id", :id=>5)
  # SELECT * FROM artists WHERE id = 5

注意: カスタム SQL を使用するデータセットを記述する場合、データセット変更メソッドを呼び出すことができますが、多くの場合これは何も影響を及ぼしません:

  DB["SELECT * FROM artists"].select(:name).order(:id)
  # SELECT * FROM artists

カスタム SQL の使用にドロップダウンする必要がある場合、クエリの特定部分のためだけにそれをおこなうことをおすすめします。
たとえば、カスタム SQL を使用する理由が、SELECT 節でデータベースのカスタム演算子を使用するためである場合:

  DB["SELECT name, (foo !@# ?) AS baz FROM artists", 'bar']

Sequel の DSL を使用して、カスタム演算子にリテラル文字列を使用するほうが良いです:

  DB[:artists].select(:name, Sequel.lit("(foo !@# ?)", 'bar').as(:baz))

この方法は Sequel のメソッド連結が動作し、Sequel のコードをみる能力を強化します。

== レコードのチェック

カレントデータセットが行を返すかどうかを知りたいだけの場合は <tt>empty?</tt> を使用します:

  Album.empty?
  # SELECT 1 FROM albums LIMIT 1
  => false

  Album.where(:id=>0).empty?
  # SELECT 1 FROM albums WHERE id = 0 LIMIT 1
  => true

  Album.where(Sequel.like(:name, 'R%')).empty?
  # SELECT 1 FROM albums WHERE name LIKE 'R%' LIMIT 1
  => false

== 集約演算

SQL 標準は、データセットについての集約情報を得るための便利なメソッドをいくつか定義しています。
+count+, +sum+, +avg+, +min+, +max+ などです。
これらの各集約関数用にデータセットメソッドがあります。

+count+ はデータセットのレコード数だけを返します。

  Album.count
  # SELECT count(*) AS count FROM albums LIMIT 1
  => 2
  
他のメソッドはカラム引数を取り、その引数で集約関数を呼びます:

  Album.sum(:id)
  # SELECT sum(id) FROM albums LIMIT 1
  => 3

  Album.avg(:id)
  # SELECT avg(id) FROM albums LIMIT 1
  => 1.5

  Album.min(:id)
  # SELECT min(id) FROM albums LIMIT 1
  => 1

  Album.max(:id)
  # SELECT max(id) FROM albums LIMIT 1
  => 2
