= プリペアドステートメントと変数のバインド

Sequel はプリペアドステートメントと変数のバインドをサポートしています。どのデータベースを使用しているかは問題ではなく、Sequel プリペアドステートメント/変数バインド API は同じです。次のアダプタでは、プリペアドステートメント/変数バインドはネイティブサポートです:

* ibmdb (prepared statements only)
* jdbc
* mysql (prepared statements only)
* mysql2 (prepared statements only)
* oracle (requires type specifiers for nil/NULL values)
* postgres (when using the pg driver)
* sqlite
* tinytds

他のアダプだでは文字列補間でエミュレートされます。

prepared_statements モデルプラグインを使用すると、いくつかの一般的なモデルアクション(モデルインスタンスの保存や削除、プライマリキーベースのモデルの検索)で自動的にプリペアドステートメントが使用されます。

== プレースホルダ

通常、プリペアドステートメントを使用する時は(もちろん変数のバインドを使用する時も)、SQL のどこに引数をバインドしたいかをアダプタに示すためにプレースホルダを置く必要があります。データベースがサポートするプレースホルダの構文はかなり異なります(たとえば :name, $1, ?)。Sequel はすべてを抽象化し、プレースホルダに :$name 形式を使用することで、プレースホルダを記述できます。たとえば:

  ds = DB[:items].where(:name=>:$n)

== 変数のバインド

このクエリの変数のバインドの使用はシンプルです:

  ds.call(:select, :n=>'Jim')

これは name が 'Jim' であるレコードを選択するのと同等のことを行います。すべてのレコードを返却し、<tt>Database#all</tt> に渡すブロックを指定することもできます。

削除または最初のレコードの返却は同様に働きます:

  ds.call(:first, :n=>'Jim') # name が 'Jim' である最初のレコード
  ds.call(:delete, :n=>'Jim') # name が 'Jim' であるレコードを削除

レコードの挿入/更新については、ハッシュ値を指定します。ハッシュはそれ自身がプレースホルダを含みます:

  # 'Jim' のレコードを挿入する。以前のフィルタは無視されていることに注意
  ds.call(:insert, {:n=>'Jim'}, :name=>:$n)
  # name が 'Jim' のすべてのレコードについて name を 'Bob' に変更
  ds.call(:update, {:n=>'Jim', :new_n=>'Bob'}, :name=>$:new_n)

== プリペアドステートメント

プリペアドステートメントは変数バインドのサポートと同等ですが、<tt>Database#prepare</tt> に名前を指定して使用し、後で <tt>Database#call</tt> または <tt>Database#call</tt> を値を指定して使用します:

  ds = DB[:items].filter(:name=>:$n)
  ps = ds.prepare(:select, :select_by_name)
  ps.call(:n=>'Jim')
  DB.call(:select_by_name, :n=>'Jim') # 上と同じ

<tt>Dataset#prepare</tt> メソッドはプリペアドステートメントを返し、後で使用するために、データベース内にプリペアドステートメントのコピーを保存します。挿入と更新クエリでは、挿入/更新のためのハッシュが +prepare+ に渡されます:

  ps1 = DB[:items].prepare(:insert, :insert_with_name, :name=>:$n)
  ps1.call(:n=>'Jim')
  DB.call(:insert_with_name, :n=>'Jim') # 上と同じ
  ds = DB[:items].filter(:name=>:$n)
  ps2 = ds.prepare(:update, :update_name, :name=>:$new_n)
  ps2.call(:n=>'Jim', :new_n=>'Bob')
  DB.call(:update_name, :n=>'Jim', :new_n=>'Bob') # 上と同じ

== 実装の問題

現在、プリペアドステートメントの生成は Object#extend を使用しています。これは性能に影響します。高性能アプリケーションについては、アプリケーション初期化時にすべてのプリペアドステートメントを生成することを推奨します。実行時に動的にプリペアドステートメントを生成するのではなく。

== データベースサポート

=== PostgreSQL

ruby-postgres または postgres-pr ドライバを使用している場合、PostgreSQL はデフォルトエミュレートサポートを使用します。ruby-pg を使用している場合、ネイティブサポートがありますが、いくつかの古いバージョンでは型指定を要求します(通常はもうありません)。
プレースホルダシンボルに __* サフィックスを追加すると、型を指定できます。これは SQL の型をキャストします(たとえば、:$name__text は SQL の "$1::text" にコンパイルされます)。プリペアドステートメントは常にサーバーサイドを使用します。

=== SQLite

SQLite はプリペアドステートメントと変数バインドの両方をサポートします。プリペアドステートメントは接続毎にキャッシュされます。

=== MySQL/Mysql2

MySQL/Mysql2 Ruby ドライバは変数バインドをサポートしません。変数バインドメソッドは文字列補間にフォールバックします。サーバーサイドのプリペアドステートメントが使用されます。

=== JDBC

JDBC はプリペアドステートメントと変数バインドの両方をサポートします。
サーバーサイドとクライアントサイドのどちらかは JDBC ドライバに依存します。
PostgreSQL over JDBC では、接続文字列に prepareThreshold=N パラメータを追加できます。
これはプリペアドステートメントが N 回呼び出された後で、サーバーサイドプリペアドステートメントを使用します。

=== TinyTDS

Microsoft SQL サーバーは真のプリペアドステートメントをサポートしないため、変数バインドで sp_executesql ストアドプロシジャを使用します。

=== IBM_DB

DB2 はプリペアドステートメントと変数バインドの両方をサポートします。プリペアドステートメントオブジェクトは接続ごとにキャッシュされます。

=== Oracle

Oracle はプリペアドステートメントと変数バインドの両方をサポートします。
プリペアドステートメント(OCI8::Cursor オブジェクト)は接続毎にキャッシュされます。
変数バインド/プリペアドステートメントに nil/NULL 値を使用する予定がなければ、__* サフィックスを使用してプレースホルダ内で型を指定すべきです。
:$name__string や :$num__integer のような、Sequel がサポートしている任意のスキーマタイプ使用できます。
blob を変数バインドで使用することは現在サポートされていません。

=== その他

サポートは補間を使用してエミュレートされます。
