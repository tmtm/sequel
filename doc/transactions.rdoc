= データベーストランザクション

Sequel はデフォルトではすべてのデータベースアダプタで自動コミットモードを使用します。
Sequel では通常、データベーストランザクションを使用したい場合は、それを明示する必要があります。
デフォルトで暗黙的にトランザクションが使用されるケースがいくつかあります:

* 多くのレコードを一度に挿入するための Dataset#import 
* Model#save
* Model#destroy
* データベースがトランザクションスキーマをサポートしている場合のマイグレーション
* いくつかのモデルプラグイン

それ以外では、使用したい時にデータベーストランザクションを使用することができます。

== 基本的なトランザクションの使用

Sequel では、データベーストランザクションを使用したい場合に <tt>Database#transaction</tt> メソッドを呼び出します。
このメソッドはブロック付きで呼び出す必要があります。
ブロックが例外を raise しない場合は、トランザクションはコミットされます:

  DB.transaction do # BEGIN
    DB[:foo].insert(1) # INSERT
  end # COMMIT
   
ブロックが Sequel::Rollback 例外を raise した場合は、トランザクションはロールバックします。ブロックの外部には例外は raise されません:

  DB.transaction do # BEGIN
    raise Sequel::Rollback
  end # ROLLBACK
  # no exception raised

他の例外が raise した場合は、トランザクションはロールバックし、ブロックの外部にその例外が raise されます:

  DB.transaction do # BEGIN
    raise ArgumentError
  end # ROLLBACK
  # ArgumentError raised

Sequel::Rollback 例外を再 raise したい場合は、<tt>:rollback => :reraise</tt> オプションを使用します:

  DB.transaction(:rollback => :reraise) do # BEGIN
    raise Sequel::Rollback
  end # ROLLBACK
  # Sequel::Rollback raised

常にロールバックしたい場合(テストで有用)は、<tt>:rollback => :always</tt> オプションを使用します:

  DB.transaction(:rollback => :always) do # BEGIN
    DB[:foo].insert(1) # INSERT
  end # ROLLBACK
  # no exception raised

現在トランザクション内にいるかどうかをチェックしたい場合は、Database#in_transaction? メソッドを使用します:

  DB.in_transaction? # false
  DB.transaction do
    DB.in_transaction? # true
  end

== トランザクションフック

トランザクション処理中で、コミットまたはロールバック後に呼び出したいフックを追加できます:

  x = nil
  DB.transaction do
    DB.after_commit{x = 1}
    DB.after_rollback{x = 2}
    x # nil
  end
  x # 1
  
  x = nil
  DB.transaction do
    DB.after_commit{x = 1}
    DB.after_rollback{x = 2}
    raise Sequel::Rollback
  end
  x # 2

== トランザクション呼び出し/セーブポイント

transaction をネストして呼ぶこともできます。デフォルトでは既存のトランザクションが再利用されます:

  DB.transaction do # BEGIN
    DB.transaction do
      DB[:foo].insert(1) # INSERT
    end
  end # COMMIT

transaction 内で <tt>:savepoint => true</tt> オプションを使用して、明示的にセーブポイントを使用することができます(データベースがサポートしている場合):

  DB.transaction do # BEGIN
    DB.transaction(:savepoint => true) do # SAVEPOINT
      DB[:foo].insert(1) # INSERT
    end # RELEASE SAVEPOINT
  end # COMMIT

Sequel::Rollback 例外がセーブポイントブロック内で raise した場合、セーブポイントだけをロールバックします:

  DB.transaction do # BEGIN
    DB.transaction(:savepoint => true) do # SAVEPOINT
      raise Sequel::Rollback
    end # ROLLBACK TO SAVEPOINT
    # no exception raised
  end # COMMIT

他の例外は、外側の transaction ブロックの内部で rescue されない限り、セーブポイントと外側の transaction がロールバックします。transaction コードによって再 raise されないためです:

  DB.transaction do # BEGIN
    DB.transaction(:savepoint => true) do # SAVEPOINT
      raise ArgumentError
    end # ROLLBACK TO SAVEPOINT
  end # ROLLBACK
  # ArgumentError raised

== プリペアドトランザクション / 2フェーズコミット

Sequel は、PostgreSQL, MySQL, H2 でデータベースプリペアドトランザクションをサポートします。プリペアドトランザクションでは、トランザクションの最後でトランザクションはすぐにはコミットされません(ロールバックの動きに似ています)。その後、+commit_prepared_transaction+ を呼び出すとトランザクションがコミットされます。+rollback_prepared_transaction+ でトランザクションがロールバックされます。プリペアドトランザクションは通常は分散データベースで、同じトランザクションがすべてのデータベースでコミットするかしないかを確実にするために使用されます。

Sequel でプリペアドトランザクションを使用するには、:prepare オプションの値に文字列を与えます:

  DB.transaction(:prepare => 'foo') do # BEGIN
    DB[:foo].insert(1) # INSERT
  end # PREPARE TRANSACTION 'foo'
   
あとで、プリペアドトランザクションをコミットできます:

  DB.commit_prepared_transaction('foo')

またはプリペアドトランザクションをロールバックできます:

  DB.rollback_prepared_transaction('foo')

== トランザクション分離レベル

SQL 標準は４つの分離レベルをサポートします: READ UNCOMMITTED, READ COMMITTED, REPEATABLE READ, SERIALIZABLE。
すべてのデータベースが標準に記述されたレベルを実装しているわけではありませんが、ほとんどのデータベースでは、<tt>Database#transaction</tt> に :isolation オプションで使用したいトランザクション分離レベルを指定することができます。
分離レベルは :uncommitted, :committed, :repeatable, :serializable のいずれかで指定できます。
このオプションを使用すると、Sequel はあなたのデータベース用の正しいトランザクション分離構文を使用します:

  DB.transaction(:isolation => :serializable) do # BEGIN
    # SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
    DB[:foo].insert(1) # INSERT
  end # COMMIT

== トランザクションを自動的にリスタート

Sequel は、特定の種類のエラーが検出された場合に、トランザクションを自動的にリスタートする機能を提供します。たとえば、シリアライズ失敗を検出した時に自動的にトランザクションをリスタートしたい場合:

  DB.transaction(:isolation => :serializable, :retry_on=>[Sequel::SerializationFailure]) do
    ModelClass.find_or_create(:name=>'Foo')
  end

serializable トランザクション分離レベルでは、find_or_create は複数のスレッドが同時にコードを実行すると、Sequel::SerializationFailure 例外を raise する場合があります。
:retry_on オプションを設定すると、トランザクションは成功するまで自動的にリスタートします。

注意: 自動リスタートはトランザクションブロック全体がべき等でないと使用すべきではありません。そうしないと、べき等でない振る舞いは複数回実行されてしまいます。たとえば、次のコードでは:

  DB.transaction(:isolation => :serializable, :retry_on=>[Sequel::SerializationFailure]) do
    logger.info 'Ensuring existence of ModelClass with name Foo'
    ModelClass.find_or_create(:name=>'Foo')
  end

シリアライズが失敗した場合 logger.info メソッドが複数回呼ばれます。

:num_retries オプションで最大リトライ回数を設定できます。デフォルトでは5回に設定されています。
