= チートシート

== データベースのオープン

  require 'rubygems'
  require 'sequel'

  DB = Sequel.sqlite('my_blog.db')
  DB = Sequel.connect('postgres://user:password@localhost/my_db')
  DB = Sequel.postgres('my_db', :user => 'user', :password => 'password', :host => 'localhost')
  DB = Sequel.ado('mydb')

== SQLite メモリデータベースのオープン

ファイル名引数がないと、sqlite アダプタは新しい sqlite データベースをメモリ内にセットアップします。

  DB = Sequel.sqlite

== SQL ステートメントのロギング

  require 'logger'
  DB = Sequel.sqlite '', :loggers => [Logger.new($stdout)]
  # または
  DB.loggers << Logger.new(...)

== 生 SQL の使用

  DB.run "CREATE TABLE users (name VARCHAR(255) NOT NULL, age INT(3) NOT NULL)"
  dataset = DB["SELECT age FROM users WHERE name = ?", name]
  dataset.map(:age)
  DB.fetch("SELECT name FROM users") do |row|
    p row[:name]
  end

== データセットの作成

  dataset = DB[:items]
  dataset = DB.from(:items)

== 多くのデータセットメソッドはチェイン可能

  dataset = DB[:managers].where(:salary => 5000..10000).order(:name, :department)

== 行のインサート

  dataset.insert(:name => 'Sharon', :grade => 50)

== 行の取り出し

  dataset.each{|r| p r}
  dataset.all # => [{...}, {...}, ...]
  dataset.first # => {...}

== 行の更新/削除

  dataset.exclude(:active).delete
  dataset.where('price < ?', 100).update(:active => true)

== データセットは Enumerable

  dataset.map{|r| r[:name]}
  dataset.map(:name) # 上と同じ

  dataset.inject(0){|sum, r| sum + r[:value]}
  dataset.sum(:value) # 上と同じ

== フィルタリング ({Dataset Filtering}[link:files/doc/dataset_filtering_rdoc.html] も参照)

=== 同値

  dataset.where(:name => 'abc')
  dataset.where('name = ?', 'abc')

=== 不等

  dataset.where{value > 100}
  dataset.exclude{value <= 100}

=== 包含

  dataset.where(:value => 50..100)
  dataset.where{(value >= 50) & (value <= 100)}

  dataset.where('value IN ?', [50,75,100])
  dataset.where(:value=>[50,75,100])

  dataset.where(:id=>other_dataset.select(:other_id))

=== スカラー値としてのサブセレクト

  dataset.where('price > (SELECT avg(price) + 100 FROM table)')
  dataset.where{price > dataset.select(avg(price) + 100)}

=== LIKE/Regexp

  DB[:items].where(Sequel.like(:name, 'AL%'))
  DB[:items].where(:name => /^AL/)

=== AND/OR/NOT

  DB[:items].where{(x > 5) & (y > 10)}.sql 
  # SELECT * FROM items WHERE ((x > 5) AND (y > 10))

  DB[:items].where({:x => 1, :y => 2}.sql_or & Sequel.~(:z => 3)).sql 
  # SELECT * FROM items WHERE (((x = 1) OR (y = 2)) AND (z != 3))

=== 数学演算子

  DB[:items].where{x + y > z}.sql 
  # SELECT * FROM items WHERE ((x + y) > z)

  DB[:items].where{price - 100 < avg(price)}.sql 
  # SELECT * FROM items WHERE ((price - 100) < avg(price))

== 並び替え

  dataset.order(:kind)
  dataset.reverse_order(:kind)
  dataset.order(Sequel.desc(:kind), :name)

== Limit/Offset

  dataset.limit(30) # LIMIT 30
  dataset.limit(30, 10) # LIMIT 30 OFFSET 10

== 結合

  DB[:items].left_outer_join(:categories, :id => :category_id).sql 
  # SELECT * FROM items LEFT OUTER JOIN categories ON categories.id = items.category_id

  DB[:items].join(:categories, :id => :category_id).join(:groups, :id => :items__group_id) 
  # SELECT * FROM items INNER JOIN categories ON categories.id = items.category_id INNER JOIN groups ON groups.id = items.group_id
	
== 集約関数メソッド

  dataset.count #=> レコード数
  dataset.max(:price)
  dataset.min(:price)
  dataset.avg(:price)
  dataset.sum(:stock)

  dataset.group_and_count(:category)
  dataset.group(:category).select(:category, Sequel.function(:AVG, :price))

== SQL 関数 / リテラル

  dataset.update(:updated_at => Sequel.function(:NOW))
  dataset.update(:updated_at => Sequel.lit('NOW()'))

  dataset.update(:updated_at => Sequel.lit("DateValue('1/1/2001')")
  dataset.update(:updated_at => Sequel.function(:DateValue, '1/1/2001'))

== スキーマ操作

  DB.create_table :items do
    primary_key :id
    String :name, :unique => true, :null => false
    TrueClass :active, :default => true
    foreign_key :category_id, :categories
    DateTime :created_at
    
    index :created_at
  end

  DB.drop_table :items

  DB.create_table :test do
    String :zipcode
    enum :system, :elements => ['mac', 'linux', 'windows']
  end

== エイリアス

  DB[:items].select(Sequel.as(:name, :item_name))
  DB[:items].select(:name___item_name)
  DB[:items___items_table].select(:items_table__name___item_name)
  # SELECT items_table.name AS item_name FROM items AS items_table

== トランザクション

  DB.transaction do
    dataset.insert(:first_name => 'Inigo', :last_name => 'Montoya')
    dataset.insert(:first_name => 'Farm', :last_name => 'Boy')
  end # どちらも挿入されるか、どちらも挿入されません

Database#transaction は再入可能です:

  DB.transaction do # BEGIN はここだけで発行されます
    DB.transaction
      dataset << {:first_name => 'Inigo', :last_name => 'Montoya'}
    end
  end # COMMIT はここだけで発行されます

エラーが raise するとトランザクションはアボートします:

  DB.transaction do
    raise "some error occurred"
  end # ROLLBACK が発行され、エラーが再 raise されます

Sequel::Rollback を raise することによってトランザクションをアボートすることもできます:

  DB.transaction do
    raise(Sequel::Rollback) if something_bad_happened
  end # ROLLBACK が発行され、エラーは raise されません

データベースがサポートしていればセーブポイントも使用できます:

  DB.transaction do
    dataset << {:first_name => 'Farm', :last_name => 'Boy'} # 挿入されます
    DB.transaction(:savepoint=>true) # このセーブポイントはロールバックされます
      dataset << {:first_name => 'Inigo', :last_name => 'Montoya'} # 挿入されません
      raise(Sequel::Rollback) if something_bad_happened
    end
    dataset << {:first_name => 'Prince', :last_name => 'Humperdink'} # 挿入されます
  end

== その他:

  dataset.sql # "SELECT * FROM items"
  dataset.delete_sql # "DELETE FROM items"
  dataset.where(:name => 'sequel').exists # "EXISTS ( SELECT * FROM items WHERE name = 'sequel' )"
  dataset.columns #=> 結果セット内のカラムの配列。SELECT を実行します
  DB.schema(:items) => [[:id, {:type=>:integer, ...}], [:name, {:type=>:string, ...}], ...]
