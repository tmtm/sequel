= 仮想行ブロック

データセットのメソッド where, order, select はすべて仮想行ブロックとして参照されるブロックを受け取ります。
他の多くのデータセットメソッドは、この3つのメソッドの一つに与えられるブロックを渡します。そのため実際には多くの Sequel::Dataset は仮想行ブロックを受け取ります。

== 何故仮想行か

仮想行は、Sequel 標準 DSL の一部が Ruby 1.9 で使用できなくなった問題を回避するために作られました。
たとえば、次の Sequel コードは Ruby 1.8 では動作しますが、1.9 では動作しません:

  dataset.where(:a > :b[:c])
  # WHERE a > b(c)
  
このコードは2つの理由のため、Ruby 1.9 で動作しません。ひとつは Symbol#> (他の不等号メソッドも) は Ruby 1.9 で既に定義されています。そのため Sequel は SQL 不等式を返すようにオーバーライドしません。
次に、Symbol#[] は既に Ruby 1.9 で既に定義されています。そのため Sequel は SQL 関数式を返すようにオーバーライドしません。

このような式を表現するために Sequel の DSL を使用できます。しかしこれは少し冗長です:

  dataset.where(Sequel.expr(:a) > Sequel.function(:b, :c))
  # WHERE a > b(c)

仮想行 DSL はこのコードをより簡潔にします:

  dataset.where{a > b(c)}

== 通常の proc vs instance evaled proc

仮想行ブロックはブロックが引数を受け付けるかどうかによって異なった振る舞いをします。
ブロックが引数を受け付けるときは、Sequel::SQL::VirtualRow のインスタンスで呼ばれます。
引数を受け付けないときは、Sequel::SQL::VirtualRow のインスタンスの文脈で評価されます。

  ds = DB[:items]
  # Regular proc
  ds.where{|o| o.column > 1}
  # WHERE column > 1
  
  # Instance-evaled proc
  ds.where{column > 1}
  # WHERE column > 1
  
通常のブロックと instance evaled ブロックとの違いをよく知らない場合は、おそらく一般的な Ruby リファレンスについて調べるべきです。
簡単にいうと通常の proc では、明示的なレシーバーなしで呼ばれた proc 内部のメソッドは、スコープを囲んでいるレシーバー上のメソッドを呼びます。
instance evaled proc は instance_eval 呼び出しのレシーバー上のメソッドを呼びます。
しかし両方のケースで、スコープの周りで有効なローカル変数は、proc 内部でも有効です。
わからない場合は、次の例が助けになるかもしれません:

  def self.a
    42
  end
  b = 32
  
  # 通常の proc
  ds.where{|o| o.c > a - b}
  # WHERE c > 10
  
  # Instance-evaled proc
  ds.where{c > a - b}
  # WHERE c > (a - 32)
  
ここには2つの関係した違いがあります。最初は <tt>o.c</tt> と +c+ の使用法で、次は +a+ の使用の違いです。
通常の proc では、スコープの周りの self が +c+ に応答しない場合は、明示的なレシーバーなしで proc 内で +c+ を呼ぶことはできません。
+a+ については、通常の proc ではスコープの周りのレシーバー上のメソッドを呼び出し、整数を返し、Sequel がアクセスする前に引き算が行われます。
instance eval proc では、レシーバーなしの +a+ 呼び出しは、VirtualRow インスタンスの a メソッドを呼び出します。
+b+ については、両方のケースでローカル変数として同じように処理されます。

基本的に、通常の proc か instance evaled proc を使用するかどうかの選択は、完全にあなた次第です。
どちらでも同じ事ができます。
instance evaled proc はコードを短くするのに役立ちますが、スコープを変更することは新しいユーザーが理解することを難しくしてしまいます。
しかし、私は proc 内部のスコープを囲むレシーバー上でメソッドを呼び出す必要がない場合は、通常は instance evaled proc を使用します。

== ローカル変数 vs メソッド呼び出し

引数が 0 個のメソッドと同じ名前のローカル変数がある場合、メソッド呼び出しをローカル変数と区別するために () 付きで呼び出すことができます:

  b = 32
  ds.where{b() > b}
  # WHERE b > 32

== VirtualRow メソッド

VirtualRow は、呼び出し方によって SQL::Identifiers, SQL::QualifiedIdentifiers, SQL::Functions, SQL::WindowFunctions を返すクラスです。

== SQL::Identifiers - 通常のカラム

SQL::Identifiers はテーブルで修飾されていない SQL の通常のカラム参照と考えることができます。
ブロックや引数なしで、メソッド名に二重アンダースコアがないメソッドが呼ばれた場合 SQL::Identifier を得ます:

  ds.where{|o| o.column > 1}
  ds.where{column > 1}
  # WHERE column > 1
  
== SQL::QualifiedIdentifiers - 修飾されたカラム

SQL::QualifiedIdentifiers は特定のテーブルで修飾された SQL のカラム参照と考えることができます。
ブロックや引数なしで、メソッド名に二重アンダースコアがあるメソッドが呼ばれた場合 SQL::QualifiedIdentifier を得ます:

  ds.where{|o| o.table__column > 1}
  ds.where{table__column > 1}
  # WHERE table.column > 1

SQL::QualifiedIdentifiers の二重アンダースコアの使用は、シンボルの使用ととても似た使用法で行われます。
これは二重アンダースコアを修飾されたカラムへの変換も行います。

== SQL::Functions - SQL 関数呼び出し

SQL::Functions は SQL の関数呼び出しと考えることができます。
引数つきでブロックなしでメソッドを呼び出す場合、簡単な関数呼び出しを得ます:

  ds.where{|o| o.function(1) > 1}
  ds.where{function(1) > 1}
  # WHERE function(1) > 1
  
複数の引数を持つ SQL 関数を呼び出すには、関数呼び出しの中でそれらの引数を使用するだけです:
  
  ds.where{|o| o.function(1, o.a) > 1}
  ds.where{function(1, a) > 1}
  # WHERE function(1, a) > 1

SQL 関数が引数を持たない場合は、SQL::Identifier の呼び出しと区別するために、空ブロックをメソッドに渡す必要があります:

  ds.select{|o| o.version{}}
  ds.select{version{}}
  # SELECT version()
  
関数呼び出しで、一つの引数として SQL ワイルドカード (*) を使用するには(count 関数で一番良く使われます)、:* をメソッドの引数として渡し、空ブロックをメソッドに渡します:
  
  ds.select{|o| o.count(:*){}}
  ds.select{count(:*){}}
  # SELECT count(*)

メソッド引数の前に DISTINCT キーワードを追加するには、:distinct をメソッドの最初に引数とし、空ブロックをメソッドに渡します:

  ds.select{|o| o.count(:distinct, o.col1){}}
  ds.select{count(:distinct, col1){}}
  # SELECT count(DISTINCT col1)
  
DISTINCT キーワードつきで複数カラムを使用するには、メソッド呼び出しで複数引数を使用します:

  ds.select{|o| o.count(:distinct, o.col1, o.col2){}}
  ds.select{count(:distinct, col1, col2){}}
  # SELECT count(DISTINCT col1, col2)
  
== SQL::WindowFunctions - SQL ウィンドウ関数呼び出し

SQL::WindowFunctions は SQL ウィンドウ関数呼び出しと考えることができます。
すべてのデータベースがサポートするわけではありませんが、クエリの種類によってはとても助けになります。
これを使用するには、メソッド呼び出しの最初の引数を :over にし、二番目の引数はオプションのハッシュで、空ブロックをメソッドに渡します。
使用方法の例を示します:

  ds.select{|o| o.rank(:over){}}
  ds.select{rank(:over){}}
  # SELECT rank() OVER ()
  
  ds.select{|o| o.count(:over, :*=>true){}}
  ds.select{count(:over, :*=>true){}}
  # SELECT count(*) OVER ()
  
  ds.select{|o| o.sum(:over, :args=>o.col1, :partition=>o.col2, :order=>o.col3){}}
  ds.select{sum(:over, :args=>col1, :partition=>col2, :order=>col3){}}
  # SELECT sum(col1) OVER (PARTITION BY col2 ORDER BY col3)

== 演算子

VirtualRows は method_missing を使用してほとんどすべてのメソッド呼び出しを操作しています。
しかし簡単にするためにいくつかの演算子メソッドで特殊な操作があります。
演算子はすべて prefix 形式を使用します。

=== 数学演算子

標準の  +, -, *, / 数学演算子が定義されています:

  ds.select{|o| o.-(1, o.a).as(b)}
  ds.select{self.-(1, a).as(b)}
  # SELECT (1 - a) AS b

=== 論理演算子

& と | メソッドは AND と OR を使用するために定義されています:

  ds.where{|o| o.&({:a=>:b}, :c)}
  ds.where{self.&({:a=>:b}, :c)}
  # WHERE ((a = b) AND c)

~ メソッドは反転のために定義されています:

  ds.where{|o| o.~({:a=>1, :b=>2})}
  ds.where{self.~({:a=>1, :b=>2})}
  # WHERE ((a != 1) OR (b != 2))

=== 不等演算子

標準の >, <, >=, <= 不等演算子が定義されています:

  ds.where{|o| o.>(1, :c)}
  ds.where{self.>(1, :c)}
  # WHERE (1 > c)

== リテラル文字列

バッククォート演算子は instance-evaled 仮想行ブロック内で、リテラル文字列を生成するために使用されます:

  ds.where{a > `some SQL`}
  # WHERE (a > some SQL)

通常の仮想行ブロックでこれを使用することもできますが、見た目がよくありません:

  ds.where{|o| o.>(:a, o.`('some SQL')}

== 複数値の返却

select と order を使用する時に、仮想行ブロックに複数値を返させたいことは珍しくありません。
これを行いたい場合は、ひとつの配列を返す必要があります:

  ds.select{|o| [o.column1, o.sum(o.column2).as(o.sum)]}
  ds.select{[column1, sum(column2).as(sum)]}
  # SELECT column1, sum(column2) AS sum
  
注意: 配列の括弧を忘れると構文エラーになります:

  # Invalid ruby syntax
  ds.select{|o| o.column1, o.sum(o.column2).as(o.sum)}
  ds.select{column1, sum(column2).as(sum)}
  
== VirtualRow メソッド呼び出しルールの別の説明

* ブロックが与えられた場合:
  * ブロックは現在呼び出されません。これは将来のバージョンで変更されるかもしれません。
  * 引数がない場合、メソッド名つきの SQL::Function が引数なしで使用されます。
  * 最初の引数が :* の場合、SQL::Function はワイルドカード引数(*)で生成されます。
  * 最初の引数が :distinct の場合、残りのすべての引数の前にキーワード DISTINCT がついて SQL::Function が生成されます。
  * 最初の引数が :over の場合、二番目の引数は SQL::Window に渡されるオプションのハッシュです。
    オプションハッシュは、関数引数としてワイルドカード引数を使用するために :*=>true を含むことができます。
    関数引数として使用するための引数の配列を指定するために :args=>...  を含むことができます。
* ブロックが与えられない場合:
  * 引数がある場合、使用されるメソッド名と与えられた引数の SQL::Function が返ります。
  * 引数がなくてメソッドが二重アンダースコアを含んでいる場合、二重アンダースコアで分割し、テーブルとカラムで SQL::QualifiedIdentifier が返ります。
  * それ以外は、メソッド名の SQL::Identifier が生成されます。
