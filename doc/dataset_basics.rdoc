= データセットの基本

== はじめに

データセットはデータベースにアクセスするために Sequel を使用する主な方法です。多くのデータベースライブラリはすべてのレコードの更新やひとつのレコードだけの更新のための固有のサポートを持っています。SQL クエリ自身をオブジェクトとして表するための Sequel の機能は Sequel にそのパワーの多くを与えています。しかし、データセットの概念を事前に知らされていない場合は、少し混乱させられます。このドキュメントはデータセットの基本的な紹介とその使用方法を与えることを目的としています。

== データセットが表すもの

データセットは二つの概念の一つを表すと考えることができます:

* SQL クエリ
* 抽象的な行のセットといくつかの関連した振る舞い

最初の概念は簡単に理解できるので、その仮定で始めたほうが良いでしょう。

== 基本

もっとも基本的なデータセットは、テーブル内の全カラムを簡単に選択したものです:

  ds = DB[:posts]
  # SELECT * FROM posts
  
ここで、DB は Sequel::Database オブジェクトを表します。ds はデータセットです。これはその下の SQL クエリを表しています。

理解すべきデータセットのアイデアの核心の一つは、データセットは変更に関数形式を使用するということです。データセット上で呼び出されるメソッドはデータセットの変更されたコピーを返し、データセットそれ自身は変更しません:

  ds2 = ds.where(:id=>1)
  ds2
  # SELECT * FROM posts WHERE id = 1
  ds
  # SELECT * FROM posts
  
ds 自身は変更されていないことに注意してください。これは ds.where は、ds 自身を変更するのではなく、ds の変更されたコピーを返すためです。これは、データセットの使用をスレッドセーフにし、連結を簡単にします:

  # スレッドセーフ:
  100.times do |i|
    Thread.new do
      ds.where(:id=>i).first
    end
  end
  
  # 連結を簡単に:
  ds3 = ds.select(:id, :name).order(:name).where{id < 100}
  # SELECT id, name FROM posts WHERE id < 100 ORDER BY name

スレッドセーフについてはあまり気にする必要はありませんが、連結可能性は Sequel の一般的な使用方法の核となります。生成される SQL に影響するほとんどすべてのデータセットメソッドは、レシーバーのデータセットの変更されたコピーを返却します。

他の理解すべき重要なことは、変更されたデータセットを返すデータセットメソッドは、データセットのコードをデータベース上で実行しないということです。結果を返すか yield するデータセットメソッドだけが、データベース上でコードを実行します:

  # SQL クエリは送られません:
  ds3 = ds.select(:id, :name).order(:name).filter{id < 100}
  
  # 結果を返すメソッド呼び出しを行うまで
  results = ds3.all
  
この API 形式の帰結として重要なことは、変更されたコピーと返すメソッドと SQL を実行するメソッドの両方を含むメソッド連結を使用すると、SQL を実行するメソッドは一般に連結の最後のメソッドになります:

  # 良い
  ds.select(:id, :name).order(:name).filter{id < 100}.all
  
  # 悪い
  ds.all.select(:id, :name).order(:name).filter{id < 100}
  
これは、all はハッシュの配列を返し、select, order, filter はデータセットメソッドで配列メソッドではないためです。

== メソッド

ユーザーが使用するデータセットメソッドの多くは2つのタイプに分類できます:

* 変更されたデータセットを返すメソッド
* データベース上でコードを実行するメソッド

=== 変更されたデータセットを返すメソッド

多くのデータセットメソッドはこのカテゴリに含まれます。これはさらに影響する節によって分類されます:

SELECT:: select, select_all, select_append, select_group, select_more
FROM:: from, from_self
JOIN:: join, left_join, right_join, full_join, natural_join, natural_left_join, natural_right_join, natural_full_join, cross_join, inner_join, left_outer_join, right_outer_join, full_outer_join, join_table
WHERE:: where, filter, exclude, exclude_where, and, or, grep, invert, unfiltered
GROUP:: group, group_by, group_and_count, select_group, ungrouped
HAVING:: having, exclude_having, invert, unfiltered
ORDER:: order, order_by, order_append, order_prepend, order_more, reverse, reverse_order, unordered
LIMIT/OFFSET:: limit, offset, unlimited
混合:: union, intersect, except
ロック:: for_update, lock_style
一般的なテーブル表現:: with, with_recursive
その他:: clone, distinct, naked, qualify, server, with_sql

=== データベース上でコードを実行するメソッド

一般に使用されるその他のデータセットメソッドの多くは、データベース上でデータセットの SQL を実行します:

SELECT (全レコード):: all, each, map, to_hash, to_hash_groups, select_map, select_order_map, select_hash, select_hash_groups
SELECT (最初のレコード):: first, last, [], single_record
SELECT (単一の値):: get, single_value
SELECT (集約):: count, avg, max, min, sum, range, interval
INSERT:: insert, <<, import, multi_insert
UPDATE:: update
DELETE:: delete
その他:: columns, columns!, truncate

=== その他のメソッド

あまり一般に使用されないその他のメソッドについては Sequel::Dataset RDoc を参照してください。
