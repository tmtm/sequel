= データセットフィルタリング

Sequel はかなり自由にレコードをフィルタリングできます。カスタム文字列として、パラメータつき文字列として、比較用の値のハッシュとして、Sequel が SQL 表現に変換する Ruby コードとして、条件を指定できます。

== カスタムフィルタ文字列を使用したフィルタリング

SQL を手で書きたい場合は、データセットの #where メソッドを指定できます:

  items.where('x < 10').sql
  #=> "SELECT * FROM items WHERE x < 10"

SQL インジェクションを防ぐために、リテラル値をクエスチョンマークに置き換えて追加引数で値を提供することができます:

  items.where('category = ?', 'ruby').sql
  #=> "SELECT * FROM items WHERE category = 'ruby'"

:placeholder とプレースホルダの値のハッシュで、プレースホルダを使用することもできます:

  items.where('category = :category', :category=>'ruby').sql
  #=> "SELECT * FROM items WHERE category = 'ruby'"

=== SQL 関数の記述

Sequel は Sequel.function メソッドを使用して関数を指定することができます:

  items.literal(Sequel.function(:avg, :price)) #=> "avg(price)"

フィルタ/選択/並び替えを指定する場合、仮想行ブロックを使用できます:

  items.select{avg(price)}

{core_extensions extension}[rdoc-ref:doc/core_extensions.rdoc] と +sql_function+ メソッドを使用できます:

  :avg.sql_function(:price)

== ハッシュを使用したフィルタリング

レコードを値で比較する必要がある場合、ハッシュを提供できます:

  items.where(:category => 'ruby').sql
  #=> "SELECT * FROM items WHERE (category = 'ruby')"

Sequel は null 値をチェックできます:

  items.where(:category => nil).sql
  #=> "SELECT * FROM items WHERE (category IS NULL)"

または2つのカラムを比較できます:

  items.where(:x => :some_table__y).sql
  #=> "SELECT * FROM items WHERE (x = some_table.y)"

複数の値で比較することもできます:

  items.where(:category => ['ruby', 'perl']).sql
  #=> "SELECT * FROM items WHERE (category IN ('ruby', 'perl'))"

範囲(端を含む場合と含まない場合)も使用できます:

  items.where(:price => 100..200).sql
  #=> "SELECT * FROM items WHERE (price >= 100 AND price <= 200)"

  items.where(:price => 100...200).sql
  #=> "SELECT * FROM items WHERE (price >= 100 AND price < 200)"

== 配列を使用したフィルタリング

データセットから複数アイテムを選択する必要がある場合、配列で指定できます:

	item_array = [1, 38, 47, 99]
	items.where(:id => item_array).sql
	#=> "SELECT * FROM items WHERE (id IN (1, 38, 47, 99))"

== 式を使用したフィルタリング

where にブロックを渡すことができます。ブロックは特殊なコンテキストで評価されます:

  items.where{price * 2 < 50}.sql
  #=> "SELECT * FROM items WHERE ((price * 2) < 50) 

これは標準的な非等値演算と算術演算で働きます:

  items.where{price + 100 < 200}.sql
  #=> "SELECT * FROM items WHERE ((price + 100) < 200) 

  items.where{price - 100 > 200}.sql
  #=> "SELECT * FROM items WHERE ((price - 100) > 200) 

  items.where{price * 100 <= 200}.sql
  #=> "SELECT * FROM items WHERE ((price * 100) <= 200) 

  items.where{price / 100 >= 200}.sql
  #=> "SELECT * FROM items WHERE ((price / 100) >= 200) 

式を組み合わせるには、オーバーロードされた論理積(&)と論理和(|)演算を使用します:

  items.where{(price + 100 < 200) & (price * 100 <= 200)}.sql
  #=> "SELECT * FROM items WHERE (((price + 100) < 200) AND ((price * 100) <= 200)) 

  items.where{(price - 100 > 200) | (price / 100 >= 200)}.sql
  #=> "SELECT * FROM items WHERE (((price - 100) > 200) OR ((price / 100) >= 200)) 

一致でフィルタするには、標準的なハッシュを使用します。Sequel.& と Sequel.| を使って他の式と組み合わせることもできます:

  items.where{Sequel.&({:category => 'ruby'}, (price + 100 < 200))}.sql
  #=> "SELECT * FROM items WHERE ((category = 'ruby') AND ((price + 100) < 200))"

これは配列や Range のような他のハッシュ値でも働きます:

  items.where{Sequel.|({:category => ['ruby', 'other']}, (:price - 100 > 200))}.sql
  #=> "SELECT * FROM items WHERE ((category IN ('ruby', 'other')) OR ((price - 100) <= 200))"

  items.where{Sequel.&({:price => (100..200)}, :active)).sql
  #=> "SELECT * FROM items WHERE ((price >= 100 AND price <= 200) AND active)"

=== 否定条件

exclude メソッドで条件を除外できます:

  items.exclude(:category => 'ruby').sql
  #=> "SELECT * FROM items WHERE (category != 'ruby')"

  items.exclude(:active).sql
  #=> "SELECT * FROM items WHERE NOT active"

  items.exclude{price / 100 >= 200}.sql
  #=> "SELECT * FROM items WHERE ((price / 100) < 200) 

=== カラム参照の比較

他のカラムと比較することもできます:

  items.where{credit > debit}.sql
  #=> "SELECT * FROM items WHERE (credit > debit)

SQL 関数との比較もできます:

  items.where{price - 100 < max(price)}.sql
  #=> "SELECT * FROM items WHERE ((price - 100) < max(price))"

== 文字列検索関数

Sequel.like メソッドを使用して大文字小文字を区別して SQL 文字列を検索できます:

  items.where(Sequel.like(:name, 'Acme%')).sql
  #=> "SELECT * FROM items WHERE (name LIKE 'Acme%')"

You can search SQL strings in a case insensitive manner using the Sequel.ilike method:

  items.where(Sequel.ilike(:name, 'Acme%')).sql
  #=> "SELECT * FROM items WHERE (name ILIKE 'Acme%')"

like の引数として Regexp を記述できます。ただしこれはおそらく PostgreSQL と MySQL だけで働きます:

  items.where(Sequel.like(:name, /Acme.*/)).sql
  #=> "SELECT * FROM items WHERE (name ~ 'Acme.*')"

like は一つ以上の引数も取ることができます:

  items.where(Sequel.like(:name, 'Acme%', /Beta.*/)).sql
  #=> "SELECT * FROM items WHERE ((name LIKE 'Acme%') OR (name ~ 'Beta.*'))"

== 文字列結合

Sequel.join で SQL 文字列を結合できます:

  items.where(Sequel.join([:name, :comment]).like('%acme%')).sql
  #=> "SELECT * FROM items WHERE ((name || comment) LIKE 'Acme%')"

Sequel.join も join 引数を取ります:

  items.filter(Sequel.join([:name, :comment], ' ').like('%acme%')).sql
  #=> "SELECT * FROM items WHERE ((name || ' ' || comment) LIKE 'Acme%')"

== サブクエリを使用したフィルタリング

Sequel の最良の特徴の一つは、データセットをサブクエリとして使用する機能です。サブクエリはレコードのフィルタリングにとても有用で、テーブル結合のシンプルな代替方法を多く提供します。サブクエリはフィルタの全形式で使用できます:

  refs = consumer_refs.where(:logged_in).select(:consumer_id)
  consumers.where(:id => refs).sql
  #=> "SELECT * FROM consumers WHERE (id IN (SELECT consumer_id FROM consumer_refs WHERE logged_in))"

subselect で一つのカラムを含んでいることをチェックしている場合は、subselect は一つのカラムだけを select することに注意してください。

== AND の代わりの OR の使用

デフォルトでは +where+ を連結すると、条件は AND されます。条件に OR を使用したい場合は、+or+ メソッドを使用できます:

  items.where(:name=>'Food').or(:vendor=>1).sql
  #=> "SELECT * FROM items WHERE ((name = 'Food') OR (vendor = 1))"
