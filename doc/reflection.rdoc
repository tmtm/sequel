= リフレクション

Sequel は複数の方法でリフレクション情報をサポートしています。

== 使用中のアダプタ

Database#adapter_scheme を使用して使用中のアダプタを取得できます:

  DB.adapter_scheme # e.g. :postgres, :jdbc, :odbc

== 接続データベース

アダプタスキームは接続中のデータベースと同じになることがあります。しかし、多くのアダプタは複数のデータベースをサポートしています。Database#database_type メソッドを使用して接続中のデータベースの種類を得ることができます:

  DB.database_type # :postgres, :h2, :mssql

== データベース内のテーブル

Database#tables でテーブル名シンボルの配列が返ります:

  DB.tables # [:table1, :table2, :table3, ...]

== データベースのビュー

Database#views でビュー名シンボルの配列が返ります:

  DB.views # [:view1, :view2, :view3, ...]

== テーブルのインデックス

Database#indexes はテーブル名を引数とし、インデックス情報のハッシュが返ります。ハッシュのキーはインデックス名で、値はサブハッシュです。サブハッシュのキーは :columns と :unique です:

  DB.indexes(:table1) # {:index1=>{:columns=>[:column1], :unique=>false}, :index2=>{:columns=>[:column2, :column3], :unique=>true}}

インデックス情報は一般に部分インデックス、関数インデックス、テーブルのプライマリキーインデックスを含みません。

== テーブルの外部キー情報

Database#foreign_key_list はテーブル名を引数とし、外部キー情報のハッシュの配列が返ります:

  DB.foreign_key_list(:table1) # [{:columns=>[:column1], :table=>:referenced_table, :key=>[:referenced_column1]}]

少なくとも次のエントリがハッシュで提供されます:

:columns :: 与えられたテーブル内のカラムの配列
:table :: カラムによって参照されるテーブル
:key :: (:table で指定されたテーブルで)参照されるカラムの配列、プライマリキーが参照されている場合いくつかのアダプタでは nil になります。

ハッシュは次のエントリも含みます:

:deferrable :: 制約が遅延可能かどうか
:name :: 制約の名前
:on_delete :: ON DELETE のアクション
:on_update :: ON UPDATE のアクション

== テーブルのカラム情報

Database#schema はテーブルシンボルを引数に取り、カラム情報を配列で返します。配列の各要素は2つの要素を持つ配列です。サブ配列の最初の要素はカラムシンボルで、２番目の要素はカラムに関する情報のハッシュです。ハッシュは次のキーを含みます:

:allow_null :: このカラムに NULL/nil が許されているかどうか。Sequel::Model 型変換コードで使用されます。
:db_type :: データベースが提供するカラムの型。文字列。さらに固有の型変換については schema_dumper プラグインによって使用されます。
:default :: カラムのデフォルト値。文字列または nil。データベース固有のフォーマットを使用します。schema_dumper プラグインによって Ruby の値に変換するために使用されます。
:primary_key :: このカラムがテーブルのプライマリキーカラムのひとつかどうか。Sequel::Model コードによってプライマリキーカラムを決定するために使用されます。
:ruby_default :: カラムの Ruby オブジェクトとしてのデフォルト値。デフォルト値を持たない場合またはデフォルト値を Ruby オブジェクトに正常に変換できない場合は nil。
:type :: カラムの型。シンボル(例えば :string)。Sequel::Model 型変換コードによって使用されます。

例:

  DB.schema(:table) # [[:column1, {:allow_null=>true, :db_type=>'varchar(255)', :default=>'blah', :primary_key=>false, :type=>:string}], ...]

== モデルのカラム情報

Model#db_schema はほとんど同じ情報を返します。違いは、２要素の配列の代わりにカラムキーのハッシュを返すことです。

  Model.db_schema # {:column1=>{:allow_null=>true, :db_type=>'varchar(255)', :default=>'blah', :primary_key=>false, :type=>:string}, ...}

== データセット/モデルによって使用されるカラム

Dataset#columns は現在のデータセットのカラムをシンボルの配列として返します:

  DB[:table].columns # [:column1, :column2, :column3, ...]

Dataset#columns! は同じことを行います。違いは、キャシュされた値を無視することです。通常はキャッシュされた値でも間違ったことにはなりませんが、データベーススキーマがデータセットが生成された後に変更されることがあります。

  DB[:table].columns! # [:column1, :column2, :column3, ...]

Model.columns は Dataset#columns と同じことをモデルのデータセットを使用して行います:

  Model.columns # [:column1, :column2, :column3, ...]

== アソシエーション定義

Sequel::Model はすべてのアソシエーションの完全な内部の特性(complete introspection capability)を提供します。

Model.associations でアソシエーションシンボルの配列を得られます:

  Model.associations # [:association1, :association2, ...]

Model.association_refrection で、単一のアソシエーション用のアソシエーションリフレクションを得られます。アソシエーションリフレクションは簡便用と内部用(そして後方互換性用)のハッシュのサブクラスです:

  Model.association_reflection(:association1) # {:name=>:association1, :type=>:many_to_one, :model=>Model, ...}

Model.all_association_reflections で、すべてのアソシエーションリフレクションの配列を得られます:

  Model.all_association_reflections # [{:name=>:association1, :type=>:many_to_one, :model=>Model, ...}, ...]

最後に、Model.association_reflections でアソシエーションリフレクションのハッシュを得られます:

  Model.association_reflections # {:association1=>{:name=>:association1, :type=>:many_to_one, :model=>Model, ...}, ...}

== Validations Defined

When using the validation_class_methods plugin, you can use the validation_reflections class method to get a hash with validation reflection information.  This returns a hash keyed on the column name symbol:

  Model.validation_reflections[:column] # => [[:presence, {}], [:length, {:maximum=>255, :message=>'is just too long'}]]

Similarly, when using the constraint_validations plugin, you can use the constraint_validation_reflections class method:

  Model.constraint_validation_reflections[:column] # => [[:presence, {}], [:max_length, {:argument=>255, :message=>'is just too long'}]]

