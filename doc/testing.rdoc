= Sequel でのテスト

アプリケーションで Sequel を使うかどうかにかかわらず、通常はコードが動作することを検証するテストを持ちたいでしょう。
Sequel を使用する時、テスティングフレームワークに統合する助けになり、可能であればトランザクションの各テストを実行するためにそれは最良です。
これはすべてのテストを各々分離し、クリーンアップのすべてを処理することでシンプルに保ちます。
Sequel は一般ライブラリのためのヘルパーは含みません。必要とする正確なコードは通常はアプリケーション特有ですが、このページは直接使用したり組み上げることができるいくつかの例を提供します。

== トランザクションテスト

それ自身のトランザクションの各テストを実行します。テストに推奨される方法です。

これらの例を使用する場合は Sequel 3.29.0 以上を使用してください。
古いバージョンは <tt>:rollback=>:always</tt> オプションをサポートしていません。

=== RSpec 1

  class Spec::Example::ExampleGroup
    def execute(*args, &block)
      result = nil
      Sequel::Model.db.transaction(:rollback=>:always){result = super(*args, &block)}
      result
    end
  end

=== RSpec 2, <2.8

  class RSpec::Core::ExampleGroup
    # Setting an around filter globally doesn't appear to work in <2.8,
    # so set one up for each subclass.
    def self.inherited(subclass)
      super
      subclass.around do |example|
        Sequel::Model.db.transaction(:rollback=>:always){example.call}
      end
    end
  end

=== RSpec 2, >=2.8

  # Global around filters should work
  RSpec.configure do |c|
    c.around(:each) do |example|
      DB.transaction(:rollback=>:always){example.run}
    end
  end

=== Test::Unit

  # Must use this class as the base class for your tests
  class SequelTestCase < Test::Unit::TestCase
    def run(*args, &block)
      result = nil
      Sequel::Model.db.transaction(:rollback=>:always){result = super}
      result
    end
  end

  # Or you could override the base implementation like this
  class Test::Unit::TestCase
    alias_method :_original_run, :run

    def run(*args, &block)
      result = nil
      Sequel::Model.db.transaction(:rollback => :always) do
        result = _original_run(*args, &block)
      end
      result
    end
  end

=== MiniTest::Unit

  # Add a subclass
  # Must use this class as the base class for your tests
  class SequelTestCase < MiniTest::Unit::TestCase
    def run(*args, &block)
      result = nil
      Sequel::Model.db.transaction(:rollback=>:always){result = super}
      result
    end
  end

  # Or you could override the base implementation like this
  class MiniTest::Unit::TestCase
    alias_method :_original_run, :run

    def run(*args, &block)
      result = nil
      Sequel::Model.db.transaction(:rollback => :always) do
        result = _original_run(*args, &block)
      end
      result
    end
  end

== 複数データベースでのトランザクションテスト

Sequel.transaction メソッドを使用して、複数データベース上でトランザクションを動かし、すべてをロールバックすることができます。
次の代わりに:

  Sequel::Model.db.transaction(:rollback=>:always)

データベースの配列で Sequel.transaction を使用します:

  Sequel.transaction([DB1, DB2, DB3], :rollback=>:always)

== 非トランザクションテスト

場合によってはトランザクションを使用できないことがあります。
たとえば、別のプロセスで実行される Web アプリケーションをテストしている場合、そのプロセスのデータベース接続にアクセスできないため、トランザクション内で examples を実行できません。
この場合、これを処理する最良の方法は、各テストの後で delete か truncate で、テストに使用したデータベーステーブルをクリーンアップすることです。

データベースの参照制約を使用している場合、テーブルの delete/truncate をする順序は重要です。
参照制約を使用している場合、参照されるテーブルよりも前に他のテーブルを参照しているテーブルを delete する必要があります。
たとえば、+artists+ テーブルを参照する +artist_id+ フィールドを伴う +albums+ テーブルを持っている場合、+artists+ テーブルの前に +albums+ テーブルを delete/truncate したいでしょう。
データベースに循環参照を含む場合、自身でカスタムクリーニングコードを書く必要があるだろうことに注意してください。

=== RSpec

  class Spec::Example::ExampleGroup
    after do
      [:table1, :table2].each{|x| Sequel::Model.db.from(x).truncate}
      # or
      [:table1, :table2].each{|x| Sequel::Model.db.from(x).delete}
    end
  end

=== Test::Unit

  # Must use this class as the base class for your tests
  class SequelTestCase < Test::Unit::TestCase
    def teardown
      [:table1, :table2].each{|x| Sequel::Model.db.from(x).truncate}
      # or
      [:table1, :table2].each{|x| Sequel::Model.db.from(x).delete}
    end
  end

= Testing Sequel Itself

Sequel は複数に別れたテストスイートを持ちます。すべてのテストスイートは RSpec 1 または RSpec 2 のどちらでも動作します。

== rake spec

+spec+ rake タスク(デフォルト rake タスクも)は Sequel のコアとモデル spec を実行します。
これらの spec はモックデータベース接続を使用し、特定の SQL を使用したテストと、通常の正しい振る舞いのテストを行います。

== rake spec_plugin

+spec_plugin+ rake タスクは Sequel に含まれるプラグインと拡張の sepc を実行します。
これらもモックデータベース接続を使用し、一般的な Sequel コアとモデル spec にとても似た操作をします。

== rake spec_<i>adapter</i> (例えば rake spec_postgres)

<tt>spec_<i>adapter</i></tt> spec はモックではなく実際のデータベース接続に対して実行し、正しい結果をテストします。
これは標準的な spec よりも遅いですが、デフォルトの spec ではモックアウトされるようなエラーを補足します。
いくつかのデータベース、アダプタ、またはその２つの組み合わせ上でだけ発生する問題を見ることができます。

これらの spec は2つのペアにブレークダウンされます。
各データベースについて、データベースに適用するだけの特殊な spec があります。これらはアダプタ spec (adapter spec)と呼ばれます。
すべての(またはほとんどすべての)データベースに適用される共有 spec もあります。
これらは統合 spec (integration spec)と呼ばれます。

== 環境変数

Seqeul は、テストするデータベースを指定するか、どのようにテストされるべきかを指定するために、テスト時に環境変数を使用します。
spec/spec_config.rb.example を spec/spec_config.rb にコピーして、それを変更することでもデータベースを指定することができます。
詳細はファイルを見てください。
データベース接続が接続文字列で指定できない場合は、環境変数ではなく spec_config.rb を使用する必要があるでしょう。

=== 接続文字列

次の環境変数はデータベース接続 URL 文字列を指定します:

* SEQUEL_INTEGRATION_URL: integration specs
* SEQUEL_FB_SPEC_DB: firebird adapter specs
* SEQUEL_MSSQL_SPEC_DB: mssql adapter specs
* SEQUEL_PG_SPEC_DB: postgres adapter specs
* SEQUEL_SQLITE_SPEC_DB: sqlite adapter specs
* SEQUEL_MY_SPEC_DB: mysql adapter specs
* SEQUEL_DB2_SPEC_DB: db2 adapter specs

=== その他

* SEQUEL_MSSQL_SPEC_REQUIRE: mssql アダプタ spec の実行時に必要とするファイルを分離する
* SEQUEL_DB2_SPEC_REQUIRE: db2 アダプタ spec の実行時に必要とするファイルを分離する
* SEQUEL_COLUMNS_INTROSPECTION: デフォルトでロードされる columns_introspection 拡張で spec を実行するかどうか
* SEQUEL_NO_PENDING: どの spec もペンディングとしてマークせず、すべての spec をトライする
* SKIPPED_TEST_WARN: ライブラリが有効でないためにテストをスキップした時に警告する
