= Sequel::Model 一括割り当て(Mass Assignment)

属性のキーと値のハッシュを引数に取る Model の多くのメソッド、<tt>Model.new</tt>, <tt>Model.create</tt>, <tt>Model#set</tt>, <tt>Model#update</tt> は Sequel の一括割り当てルールに従います。
これらのメソッドにハッシュを渡すとき、各キーに <tt>=</tt> が追加され(セッターメソッド)、セッターメソッドが存在していて、アクセスに制限がかかっていない場合は、Sequel はセッターメソッドをハッシュの値を引数にして呼び出します。
デフォルトでは、制限されたセッターメソッドには2種類あります。
ひとつは <tt>typecast_on_assignment=</tt> や <tt>==</tt> のようなメソッドで、カラムに影響しません。
これらのメソッドは一括割り当てでは有効にできません。
二つ目はプライマリキーセッターです。
プライマリキーセッターの使用を有効にするには、モデルの +unrestrict_primary_key+ を呼び出す必要があります:

  Post.unrestrict_primary_key

デフォルトで一括割り当てはプライマリキーカラムを除くすべてのカラム値の変更を許しているので、セキュリティリスクがになる場合があります。
Sequel は一括割り当てを安全にする複数の方法を持っています。
最初の方法は +set_allowed_columns+ です:

  Post.set_allowed_columns :title, :body, :category

これはどのメソッドが許可されるか(<tt>title=</tt>, <tt>body=</tt>, <tt>category=</tt>)を明示的に設定します。他のすべてのメソッドは許可されません。
このメソッドは、すべてのケースで同じカラムが許可されるようなシンプルなアプリケーションで有用です。しかし、異なるシナリオで異なるカラムが許可される時(たとえば、管理者アクセスと利用者アクセス)にはふさわしくありません。
異なるケースで異なるカラムが許可されるような場合を扱うために、+set_only+ や +update_only+ を使用できます:

  # 利用者の場合
  post.set_only(params[:post], :title, :body)
  # 管理者の場合
  post.set_only(params[:post], :title, :body, :deleted)

この場合、利用者での一括割り当てでは <tt>title=</tt> と <tt>body=</tt> メソッドだけが許可され、管理者での一括割り当てでは <tt>title=</tt>, <tt>body=</tt>, <tt>deleted=</tt> だけが許可されます。

デフォルトでは、不正なセッターメソッド呼び出しが試みられると、Sequel は <tt>Sequel::Error</tt> 例外を raise します。Sequel が不正な呼び出しを黙って無視するようにするには次のように行います:

  # グローバルなデフォルト
  Sequel::Model.strict_param_setting = false
  # クラスレベル
  Post.strict_param_setting = false
  # インスタンスレベル
  post.strict_param_setting = false

+set_only+ と +update_only+ に加え、Sequel は +set_fields+ と +update_fields+ メソッドも持ちます。これらは多くのユーザーにとってより良い一括割り当ての選択です。
これらのメソッドは二つの引数を取ります。最初の引数は属性ハッシュで、2番目の引数は正当なフィールド名の配列です:

  post.set_fields(params[:post], [:title, :body])

+set_fields+ と +update_fields+ は +set_only+ と +update_only+ とは実装が異なります。
+set_only+ と +update_only+ では、ハッシュは繰り返され、それが正当かどうかを見るために各メソッド呼び出しが試みられます。
+set_fields+ と +update_fields+ では、配列が繰り返され、ハッシュの値を探して適切なセッターメソッドを呼び出すだけです。
+set_fields+ と +update_fields+ は入力の中の指定したフィールドを明示して、その他のフィールドは無視したい場合のためにデザインされています。
これはフォームフィールドが静的な HTML フォームのようなものに対してうまく働きます。
+set_only+ と +update_only+ は、どのフィールドが入力で提供されるか定かではないが、いくつかのセッターメソッドだけが呼び出せる場合のためにデザインされています。
これは柔軟な API に対してうまく働きます。

+set_fields+ and +update_fields+ are designed for the case where you are expecting specific fields in the input, and want to ignore the other fields.
They work great for things like HTML forms where the form fields are static.
+set_only+ and +update_only+ are designed for cases where you are not sure what fields are going to be present in the input, but still want to make sure only certain setter methods can be called.
They work great for flexible APIs.

+set_fields+ と +update_fields+ はオプション引数ハッシュを取り、現在は :missing オプションを処理します。<tt>:missing=>:skip</tt> つきの +set_fields+ と +update_fields+ は、ハッシュ中の欠けているエントリをスキップします。柔軟な API で使用できるようにします。<tt>:missing=>:raise</tt> つきの +set_fields+ と +update_fields+ は、ハッシュ内のエントリがひとつでも欠けていると、 nil やハッシュのデフォルト値を割り当てる代わりに、エラーを raise します。これは、デフォルト一括割り当てメソッドの :strict_param_checking 設定のように、厳密なチェックを行います。 You can use the <tt>Model.default_set_fields_options=</tt> method to set the default options to use for +set_fields+ and +update_fields+ on a global or per-model basis.

すべての一括割り当てでは、+set+ で始まるメソッドはオブジェクトを保存せずに属性を設定します。+update+ で始まるメソッドは属性を設定し、オブジェクトへの変更を保存します。
