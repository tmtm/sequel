= bin/sequel

bin/sequel は "sequel" コマンドラインツールを参照するために使用される名前です。これは sequel gem で導入されます。デフォルトでは bin/sequel は IRB シェルを提供し、コマンドラインで提供されるデータベース接続文字列を使用して生成される Sequel::Database オブジェクトを +DB+ 定数に設定します。たとえば、sqlite アダプタを使用して新しいインメモリ SQLite データベースに接続するには、次のように使用できます:

  sequel sqlite:/

これはアイデアをすばやくテストするためにとても有用です。そして、インメモリ SQLite データベースはプログラム終了時に破棄されるため、環境に影響しません。

== git checkout からの実行

sequel gem をインストールしてあれば、"sequel" を実行するだけでプログラムをロードできます。rubygems は sequel バイナリをロードパスに配置するからです。しかし、bin/sequel をリポジトリチェックアウトの root から実行したい場合は、おそらく次のようにすべきです:

  ruby -I lib bin/sequel

この -I lib はリポジトリチェックアウトのコードを使用することを確実にします。

== 接続するデータベースの選択

=== 接続文字列

通常はおそらく、使用したいアダプタとデータベース接続情報を示す接続文字列の引数を bin/sequel に与えたいでしょう。たとえば:

  sequel sqlite:/
  sequel postgres://user:pass@host/database_name
  sequel mysql2://user:pass@host/database_name

詳細と接続文字列の例は {データベース接続ガイド}[link:files/doc/opening_databases_rdoc.html] を参照してください。

=== YAML 接続ファイル

接続文字列を使用してデータベース接続を指定する代わりに、接続情報を含んだ YAML 構成ファイルのパスを与えることもできます。この YAML ファイルは一つのオプションハッシュを含んでいるか、ネストされたハッシュを含んでいます。トップレベルハッシュは、環境のキーと各環境のハッシュの値です。yaml 接続ファイルで -e オプションを使用すると、ネストされたハッシュ使用時に使用する環境を選択できます。

  sequel -e production config/database.yml

bin/sequel は ActiveRecord YAML 構成ファイルを直接にはサポートしないことに注意してください。同じオプションでも異なる名前を使用しています。

=== モック接続

接続文字列または YAML 接続ファイルを提供しない場合、Sequel はモックデータベースで開始します。モックデータベースは何もデータベースを持たないで Sequel を使用できます。実際のデータベースからの結果を得ることなしに SQL を生成したい場合に有用です。

  sequel

Sequel はデータベース固有の構文のモックアダプタを使用する機能もあります。データベースに実際に接続しないで特定のデータベース種類に接続したように装います。これを行うためには、次の接続文字列を使用する必要があります:

  sequel mock://postgres

== IRB シェルだけではない

bin/sequel は IRB シェルだけでなく、さらに多くのことも可能です。

=== コードの実行

bin/sequel は、コマンドラインで与えられたデータベースを +DB+ にあらかじめセットした状態で他の Ruby ファイルを実行することに使用することもできます:

  sequel postgres://host/database_name path/to/some_file.rb

Linux の最近のバージョンでは、これは bin/sequel を shebang ラインに使用することができるという意味です:

  #!/path/to/bin/sequel postgres://host/database_name

Ruby コードの小さな部品をすばやく実行したい場合は、-c オプションを使用できます:

  sequel -c "p DB.tables" postgres://host/database_name

同様に、データを bin/sequel にパイプで渡す場合は、次のように実行します:

  echo "p DB.tables" | sequel postgres://host/database_name

=== データベースのマイグレーション

-m オプションで、Sequel はデータベースをマイグレーションできます。-m で指定されたマイグレーションディレクトリを使用して、データベースをマイグレーションします:

  sequel -m /path/to/migrations/dir postgres://host/database

-M 属性を使用して、マイグレーションのバージョンを設定できます:

  sequel -m /path/to/migrations/dir -M 3 postgres://host/database

マイグレーションについての詳細は {migration guide}[link:files/doc/migration_rdoc.html] を参照してください。

=== スキーマのダンプ

-d または -D オプションを使用すると、Sequel はデータベースのスキーマを、Sequel マイグレーション形式で標準出力にダンプします:

  sequel -d postgres://host/database

この情報をファイルに保存するには、標準シェルリダイレクションを使用します:

  sequel -d postgres://host/database > /path/to/migrations/dir/001_base_schema.rb

-d オプションはデータベースに依存しない形式でマイグレーションをダンプし、-D オプションはデータベース固有の形式でダンプします。

-S オプションはデータベース内のすべてのテーブルのスキーマキャッシュをダンプします。これは schema_caching 拡張の使用時に、モデルでの Sequel の使用を高速化できます。このオプションはスキーマをダンプするパスとともに指定します:

  sequel -S /path/to/schema_cache.db postgres://host/database

=== データベースのコピー

-C オプションを使用すると、Sequel はあるデータベースから他のデータベースに内容をコピーすることができます。両者でデータベースの種類が異なっていても可能です。このオプションを使用するときは、２つの接続文字列をコマンドラインに指定します:

  sequel -C mysql://host1/database postgres://host2/database2

これは、テーブル構造、テーブルデータ、インデックス、そして外部キーを MySQL データベースから PostgreSQL データベースにコピーします。

== 他のオプション

上で述べなかった他のオプションを簡単に説明します。

=== -E

-E はすべての SQL クエリを標準出力に書き出します。Sequel がデータベースに送信したすべての SQL を見ることができます。

=== -I include_directory

-I は ruby -I と同様に追加の $LOAD_PATH ディレクトリを指定します。

=== -l log_file

-l は -E と同様ですが、すべての SQL クエリを指定したファイルに書き出します。

=== -L load_directory

-L は指定されたディレクトリ配下のすべての *.rb ファイルをロードします。これは通常 Sequel::Model クラスを bin/sequel にロードするのに使用されます。

=== -N

-N は Database オブジェクトの生成時に接続をテストするのをスキップします。これはまれに必要となります。

=== -r require_lib

-r は ruby -r と同様に指定されたライブラリを require します。

=== -t

-t はエラー発生時に bin/sequel がすべてのバックトレースを出力します。これはデバッグを助けになります。

=== -h

-h は bin/sequel の使用方法を出力します。

=== -v

-v は使用している Sequel のバージョンを表示します。
