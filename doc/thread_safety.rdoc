= スレッド安全

ほとんどの Sequel 使用(すべての一般的な Sequel 使用)はデフォルトでスレッド安全です。
具体的には、複数スレッドは Database インスタンス、Dataset インスタンス、Model クラスを問題なしに同時に操作できます。
通常、Database インスタンスと Model クラスはアプリケーション開始後には変更されませんし、Dataset インスタンスの変更は、それを変更するのではなく変更されたコピーを返します。

== コネクションプール

複数のスレッドが同じデータベースを同時に操作できるようにするために、Sequel はコネクションプールを使用します。
コネクションプールはスレッドが最小限の時間で接続を使用し、使用している接続が終了するとすぐに接続をプールに戻すようにデザインされています。
スレッドが接続を要求してプールが有効な接続を持たない場合、新しい接続が生成されます。
プール内の接続の最大数に達していた場合は、接続が有効になるか、接続プールタイムアウトになる(この場合は PoolTimeout エラーが raise します)まで、スレッドはブロックします(実際には busy-wait)。

== 例外

明確にスレッド安全でないことの小さなリストを示します。
これは網羅的なリストではありません。ここで記述していないケースもあり得ます。

1) Model インスタンス: Model インスタンスは、最初に frozen されない限りスレッド安全ではありません。複数のスレッドが frozen していない Model インスタンスを同時に操作すべきではありません。

2) Model クラスの変更: アソシエーションの追加やプラグインのロードなどの Model クラスの変更はスレッド安全であるようにはデザインされていません。他のスレッドが同時にアクセスできる場合は、スレッド内でクラスを変更すべきではありません。Model サブクラス化はスレッド安全にデザインされています。そのためスレッド内で Model サブクラスを生成し、それを安全に変更できます。

3) Dataset 変更メソッド: Dataset 変更メソッドはスレッド安全ではありません。他のスレッドによってアクセスされる Dataset でそれらを呼ぶべきではありません。スレッド内部で最初に Dataset を clone して、clone された Dataset の変更メソッドを呼ぶことは安全です。
